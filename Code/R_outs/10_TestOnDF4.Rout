
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

* Project '~/' loaded. [renv 0.13.2]
> ##################################
> ## Test both the severe and cerebral malaria signatures on Dengue fever
> 
> rm(list = ls())
> 
> setwd("~/Documents/Research/Projects/Malaria")
> 
> renv::activate("~/Documents/Research/Projects/Malaria")
* Project '~/Documents/Research/Projects/Malaria' loaded. [renv 0.14.0]
Warning message:
renv 0.14.0 was loaded from project library, but this project is configured to use renv 0.12.2.
Use `renv::record("renv@0.14.0")` to record renv 0.14.0 in the lockfile.
Use `renv::restore(packages = "renv")` to install renv 0.12.2 into the project library. 
> 
> library(GEOquery)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

Setting options('download.file.method.GEOquery'='auto')
Setting options('GEOquery.inmemory.gpl'=FALSE)
> library(randomForest)
randomForest 4.6-14
Type rfNews() to see new features/changes/bug fixes.

Attaching package: ‘randomForest’

The following object is masked from ‘package:Biobase’:

    combine

The following object is masked from ‘package:BiocGenerics’:

    combine

> library(pROC)
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following object is masked from ‘package:BiocGenerics’:

    var

The following objects are masked from ‘package:stats’:

    cov, smooth, var

> library(precrec)

Attaching package: ‘precrec’

The following object is masked from ‘package:pROC’:

    auc

> library(ggplot2)

Attaching package: ‘ggplot2’

The following object is masked from ‘package:randomForest’:

    margin

> 
> #DengueDataset4 <- getGEO("GSE18090", GSEMatrix = T, AnnotGPL = T)
> #DengueDataset4 <- DengueDataset4$GSE18090_series_matrix.txt.gz
>  
> #save(DengueDataset4, file = "./Data/DengueDataset4.rda")
> 
> load("./Data/DengueDataset4.rda")
> 
> Expr_Dengue4 <- exprs(DengueDataset4)
> Pheno_Dengue4 <- pData(DengueDataset4)
> FeatData_Dengue4 <- fData(DengueDataset4)
> 
> 
> ############################
> ## Annotation
> 
> ## Expr_Dengue4
> head(rownames(Expr_Dengue4))
[1] "1007_s_at" "1053_at"   "117_at"    "121_at"    "1255_g_at" "1294_at"  
> rownames(Expr_Dengue4) <- FeatData_Dengue4$`Gene symbol`
> summary(is.na(rownames(Expr_Dengue4)))
   Mode   FALSE 
logical   54675 
> #rownames(Expr_Dengue4) <- gsub("-","", rownames(Expr_Dengue4))
> #rownames(Expr_Dengue4) <- gsub("_","",rownames(Expr_Dengue4))
> sel <- which(apply(Expr_Dengue4, 1, function(x) all(is.finite(x)) ))
> Expr_Dengue4 <- Expr_Dengue4[sel, ]
> Expr_Dengue4 <- Expr_Dengue4[!is.na(rownames(Expr_Dengue4)),]
> dim(Expr_Dengue4)
[1] 54675    26
> 
> range(Expr_Dengue4) 
[1] 3.28974e-02 3.59681e+04
> Expr_Dengue4 <- log2(Expr_Dengue4)
> Expr_Dengue4 <- t(scale(t(Expr_Dengue4), center = TRUE, scale = TRUE))
> 
> 
> ####################################
> 
> 
> ########################################################################################
> #########################################################################################
> ###### DF and DHF vs non dengue
> 
> ### Modify the phenotype
> 
> # Pheno1
> Pheno_Dengue4$DiseaseStatus <- as.factor(Pheno_Dengue4$source_name_ch1)
> levels(Pheno_Dengue4$DiseaseStatus) <- c("case", "case", "control") 
> table(Pheno_Dengue4$DiseaseStatus)

   case control 
     18       8 
> Pheno_Dengue4$DiseaseStatus <- factor(Pheno_Dengue4$DiseaseStatus, levels = c("control", "case"))
> #Expr_Dengue4 <- Expr_Dengue4[, colnames(Expr_Dengue4) %in% rownames(Pheno_Dengue4)]
> all(rownames(Pheno_Dengue4) == colnames(Expr_Dengue4))
[1] TRUE
> 
> ClassDFvsnormal <- Pheno_Dengue4$DiseaseStatus
> 
> ####################################
> ## Load the severe malaria signature
> load("./Objs/RF_Comp.rda")
> 
> #################
> ## Predict in the Dengue dataset (DHF vs DF)
> 
> TestingData_Dengue <- t(Expr_Dengue4)
> 
> PredVotes_Dengue <- predict(RF_Comp, newdata = TestingData_Dengue, type = "vote")
> PredResponse_Dengue <- predict(RF_Comp, TestingData_Dengue, type="response")
> 
> ROCTest <- roc(ClassDFvsnormal, PredVotes_Dengue[,2], plot = F, print.auc = TRUE, levels = c("control", "case"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
> ROCTest

Call:
roc.default(response = ClassDFvsnormal, predictor = PredVotes_Dengue[,     2], levels = c("control", "case"), direction = "<", auc = TRUE,     ci = TRUE, plot = F, print.auc = TRUE, col = "blue", lwd = 2,     grid = TRUE)

Data: PredVotes_Dengue[, 2] in 8 controls (ClassDFvsnormal control) < 18 cases (ClassDFvsnormal case).
Area under the curve: 0.434
95% CI: 0.2106-0.6575 (DeLong)
> 
> # For ROC and PRC curves
> sscurves_Dengue4 <- evalmod(scores = PredVotes_Dengue[,2], labels = ClassDFvsnormal)
> sscurves_Dengue4

    === AUCs ===

     Model name Dataset ID Curve type       AUC
   1         m1          1        ROC 0.4340278
   2         m1          1        PRC 0.7255179


    === Input data ===

     Model name Dataset ID # of negatives # of positives
   1         m1          1              8             18

> ROC_Dengue4 <- autoplot(sscurves_Dengue4, curvetype = c("ROC")) + labs(title = "ROC curve of the complicated malaria signature in GSE18090 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.43"), size = 3)
> PRC_Dengue4 <- autoplot(sscurves_Dengue4, curvetype = c("PRC")) + labs(title = "PRC curve of the complicated malaria signature in GSE18090 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.725"), size = 3)
> 
> save(ROC_Dengue4, PRC_Dengue4, file = "./Objs/Dengue4_Curves.rda")
> 
> 
> ####################################
> ## Load the cerebral malaria signature
> load("./Objs/RF_Cerebral.rda")
> 
> #################
> ## Predict
> PredVotes_Dengue_cerebral <- predict(RF_Cerebral, newdata = TestingData_Dengue, type = "vote")
> PredResponse_Dengue_cerebral <- predict(RF_Cerebral, TestingData_Dengue, type="response")
> 
> ROCTest_cerebral <- roc(ClassDFvsnormal, PredVotes_Dengue_cerebral[,2], plot = F, print.auc = TRUE, levels = c("control", "case"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
> ROCTest_cerebral

Call:
roc.default(response = ClassDFvsnormal, predictor = PredVotes_Dengue_cerebral[,     2], levels = c("control", "case"), direction = "<", auc = TRUE,     ci = TRUE, plot = F, print.auc = TRUE, col = "blue", lwd = 2,     grid = TRUE)

Data: PredVotes_Dengue_cerebral[, 2] in 8 controls (ClassDFvsnormal control) < 18 cases (ClassDFvsnormal case).
Area under the curve: 0.6458
95% CI: 0.3895-0.9022 (DeLong)
> 
> # For ROC and PRC curves
> sscurves_Dengue4_cerebral <- evalmod(scores = PredVotes_Dengue_cerebral[,2], labels = ClassDFvsnormal)
> sscurves_Dengue4_cerebral

    === AUCs ===

     Model name Dataset ID Curve type       AUC
   1         m1          1        ROC 0.6458333
   2         m1          1        PRC 0.7438375


    === Input data ===

     Model name Dataset ID # of negatives # of positives
   1         m1          1              8             18

> ROC_Dengue4_cerebral <- autoplot(sscurves_Dengue4_cerebral, curvetype = c("ROC")) + labs(title = "ROC curve of the cerebral malaria signature in GSE18090 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUC = ", round(ROCTest_cerebral$auc, 2)), size = 3)
> PRC_Dengue4_cerebral <- autoplot(sscurves_Dengue4_cerebral, curvetype = c("PRC")) + labs(title = "PRC curve of the cerebral malaria signature in GSE18090 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.74"), size = 3)
> 
> save(ROC_Dengue4_cerebral, PRC_Dengue4_cerebral, file = "./Objs/Dengue4_Curves_cerebral.rda")
> 
> ######################################################################################
> ###### DF and DHF vs non dengue
> 
> ### Modify the phenotype
> 
> # Pheno1
> Pheno_Dengue4 <- Pheno_Dengue4[!(Pheno_Dengue4$source_name_ch1 == "PBMCs from ND patient"), ]
> Pheno_Dengue4$DiseaseStatus <- as.factor(Pheno_Dengue4$source_name_ch1)
> levels(Pheno_Dengue4$DiseaseStatus) <- c("DF", "DHF") 
> table(Pheno_Dengue4$DiseaseStatus)

 DF DHF 
  8  10 
> 
> Expr_Dengue4 <- Expr_Dengue4[, colnames(Expr_Dengue4) %in% rownames(Pheno_Dengue4)]
> all(rownames(Pheno_Dengue4) == colnames(Expr_Dengue4))
[1] TRUE
> 
> ClassDFvsDHF <- Pheno_Dengue4$DiseaseStatus
> 
> ####################################
> ## Load the complicated malaria signature
> load("./Objs/RF_Comp.rda")
> 
> #################
> ## Predict in the Dengue dataset (DF vs DHF)
> 
> TestingData_Dengue <- t(Expr_Dengue4)
> 
> PredVotes_Dengue <- predict(RF_Comp, newdata = TestingData_Dengue, type = "vote")
> PredResponse_Dengue <- predict(RF_Comp, TestingData_Dengue, type="response")
> 
> ROCTest <- roc(ClassDFvsDHF, PredVotes_Dengue[,2], plot = F, print.auc = TRUE, levels = c("DF", "DHF"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
> ROCTest

Call:
roc.default(response = ClassDFvsDHF, predictor = PredVotes_Dengue[,     2], levels = c("DF", "DHF"), direction = "<", auc = TRUE,     ci = TRUE, plot = F, print.auc = TRUE, col = "blue", lwd = 2,     grid = TRUE)

Data: PredVotes_Dengue[, 2] in 8 controls (ClassDFvsDHF DF) < 10 cases (ClassDFvsDHF DHF).
Area under the curve: 0.75
95% CI: 0.4999-1 (DeLong)
> 
> # For ROC and PRC curves
> sscurves_Dengue4 <- evalmod(scores = PredVotes_Dengue[,2], labels = ClassDFvsDHF)
> sscurves_Dengue4

    === AUCs ===

     Model name Dataset ID Curve type       AUC
   1         m1          1        ROC 0.7500000
   2         m1          1        PRC 0.7518336


    === Input data ===

     Model name Dataset ID # of negatives # of positives
   1         m1          1              8             10

> ROC_Dengue4_DFvsDHF <- autoplot(sscurves_Dengue4, curvetype = c("ROC")) + labs(title = "ROC curve of the complicated malaria signature in GSE18090 (DF vs DHF)") + annotate("text", x = .65, y = .25, label = paste("AUC = ", round(ROCTest$auc, 2)), size = 5)
> PRC_Dengue4_DFvsDHF <- autoplot(sscurves_Dengue4, curvetype = c("PRC")) + labs(title = "PRC curve of the complicated malaria signature in GSE18090 (DF vs DHF)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.75"), size = 5)
> 
> save(ROC_Dengue4_DFvsDHF, PRC_Dengue4_DFvsDHF, file = "./Objs/Dengue4_Curves_DFvsDHF.rda")
> 
> 
> ####################################
> ## Load the cerebral malaria
> load("./Objs/RF_Cerebral.rda")
> 
> #################
> ## Predict
> PredVotes_Dengue_cerebral <- predict(RF_Cerebral, newdata = TestingData_Dengue, type = "vote")
> PredResponse_Dengue_cerebral <- predict(RF_Cerebral, TestingData_Dengue, type="response")
> 
> ROCTest_cerebral <- roc(ClassDFvsDHF, PredVotes_Dengue_cerebral[,2], plot = F, print.auc = TRUE, levels = c("DF", "DHF"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
> ROCTest_cerebral

Call:
roc.default(response = ClassDFvsDHF, predictor = PredVotes_Dengue_cerebral[,     2], levels = c("DF", "DHF"), direction = "<", auc = TRUE,     ci = TRUE, plot = F, print.auc = TRUE, col = "blue", lwd = 2,     grid = TRUE)

Data: PredVotes_Dengue_cerebral[, 2] in 8 controls (ClassDFvsDHF DF) < 10 cases (ClassDFvsDHF DHF).
Area under the curve: 0.5188
95% CI: 0.2276-0.8099 (DeLong)
> 
> # For ROC and PRC curves
> sscurves_Dengue4_cerebral <- evalmod(scores = PredVotes_Dengue_cerebral[,2], labels = ClassDFvsDHF)
> sscurves_Dengue4_cerebral

    === AUCs ===

     Model name Dataset ID Curve type     AUC
   1         m1          1        ROC 0.51875
   2         m1          1        PRC 0.59794


    === Input data ===

     Model name Dataset ID # of negatives # of positives
   1         m1          1              8             10

> ROC_Dengue4_DFvsDHF_cerebral <- autoplot(sscurves_Dengue4_cerebral, curvetype = c("ROC")) + labs(title = "ROC curve of the cerebral malaria signature in GSE18090 (DF vs DHF)") + annotate("text", x = .65, y = .25, label = paste("AUC = ", round(ROCTest_cerebral$auc, 2)), size = 5)
> PRC_Dengue4_DFvsDHF_cerebral <- autoplot(sscurves_Dengue4_cerebral, curvetype = c("PRC")) + labs(title = "PRC curve of the cerebral malaria signature in GSE18090 (DF vs DHF)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.60"), size = 5)
> 
> save(ROC_Dengue4_DFvsDHF_cerebral, PRC_Dengue4_DFvsDHF_cerebral, file = "./Objs/Dengue4_Curves_DFvsDHF_cerebral.rda")
> 
> 
> proc.time()
   user  system elapsed 
  3.330   0.409   4.223 
