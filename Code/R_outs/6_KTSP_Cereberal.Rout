
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

* Project '~/' loaded. [renv 0.13.2]
> ############################################################################
> 
> 
> rm(list = ls())
> 
> setwd("~/Documents/Research/Projects/Malaria")
> 
> renv::activate("~/Documents/Research/Projects/Malaria")
* Project '~/Documents/Research/Projects/Malaria' loaded. [renv 0.14.0]
Warning message:
renv 0.14.0 was loaded from project library, but this project is configured to use renv 0.12.2.
Use `renv::record("renv@0.14.0")` to record renv 0.14.0 in the lockfile.
Use `renv::restore(packages = "renv")` to install renv 0.12.2 into the project library. 
> 
> ### Load library
> require(switchBox)
Loading required package: switchBox
Loading required package: pROC
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

Loading required package: gplots

Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> require(Biobase)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:pROC’:

    var

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> require(limma)
Loading required package: limma

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

> require(pROC)
> require(caret)
Loading required package: caret
Loading required package: lattice
Loading required package: ggplot2
> require(RColorBrewer)
Loading required package: RColorBrewer
> require(ggplot2)
> require(reshape)
Loading required package: reshape
> require(plotROC)
Loading required package: plotROC

Attaching package: ‘plotROC’

The following object is masked from ‘package:pROC’:

    ggroc

> library(enrichR)
Welcome to enrichR
Checking connection ... 
Enrichr ... Connection is Live!
FlyEnrichr ... Connection is available!
WormEnrichr ... Connection is available!
YeastEnrichr ... Connection is available!
FishEnrichr ... Connection is available!
> library(mltools)
> library(xtable)
> library(dplyr)

Attaching package: ‘dplyr’

The following object is masked from ‘package:reshape’:

    rename

The following object is masked from ‘package:Biobase’:

    combine

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(superheat)
> 
> ## Load data
> load("./Objs/MalariaDataGood_NCvsC.rda")
> 
> # Quantile normalization
> usedTrainMat <- normalizeBetweenArrays(mixTrainMat, method = "quantile")
> usedTestMat <- normalizeBetweenArrays(mixTestMat, method = "quantile")
> 
> boxplot(mixTrainMat)
> 
> boxplot(usedTrainMat)
> 
> # Associated groups
> usedTrainGroup <- mixTrainGroup
> usedTestGroup <- mixTestGroup
> 
> # Load mechanistic pairs
> Up <- c("PUM2", "SETX", "RABEP1", "ELF2", "ZNF197", "KRIT1", "EPHA4", "XRCC5", "LARP4", "SCN2B", "CDH8", "MREG", "TTC17", "THRB")
> Down <- c("TRIP12", "MYH11", "ANK2", "CD53", "SPATS2L", "KPNA6", "CHRNA10", "ASB7", "C18orf8")
> 
> myTSPs <- expand.grid(Up, Down)
> myTSPs <- as.matrix(myTSPs)
> colnames(myTSPs) <- c("Up", "Down")
> 
> ### Common genes
> keepGns <- intersect(as.vector(myTSPs), rownames(usedTrainMat))
> 
> #UsedTrainMat <- UsedTrainMat[keepGns, ]
> #UsedTestMat <- UsedTestMat[keepGns, ]
> 
> ### For the TSP
> myTSPs <- myTSPs[myTSPs[,1] %in% keepGns & myTSPs[,2] %in% keepGns , ]
> 
> ###########################################################################
> ### TRAINING using restricted pairs
> ###########################################################################
> 
> ### Set Feature number and max k
> ktsp <- c(3:25) #8
> featNo <- nrow(usedTrainMat)
> 
> ### Train a classifier using default filtering function based on Wilcoxon
> set.seed(333)
> 
> ktspPredictorRes <- SWAP.Train.KTSP(
+   usedTrainMat, usedTrainGroup, krange=9, featureNo= featNo, 
+   FilterFunc = SWAP.Filter.Wilcoxon, RestrictedPairs = myTSPs)
> 
> ktspPredictorRes
$name
[1] "9TSPS"

$TSPs
              gene1    gene2    
TTC17,C18orf8 "TTC17"  "C18orf8"
PUM2,ASB7     "PUM2"   "ASB7"   
RABEP1,MYH11  "RABEP1" "MYH11"  
SETX,SPATS2L  "SETX"   "SPATS2L"
XRCC5,TRIP12  "XRCC5"  "TRIP12" 
ELF2,CHRNA10  "ELF2"   "CHRNA10"
LARP4,ANK2    "LARP4"  "ANK2"   
MREG,KPNA6    "MREG"   "KPNA6"  
ZNF197,CD53   "ZNF197" "CD53"   

$score
TTC17,C18orf8     PUM2,ASB7  RABEP1,MYH11  SETX,SPATS2L  XRCC5,TRIP12 
    0.3507571     0.3323721     0.3233598     0.3233598     0.2918169 
 ELF2,CHRNA10    LARP4,ANK2    MREG,KPNA6   ZNF197,CD53 
    0.2907355     0.2285509     0.2170152     0.1602380 

$tieVote
TTC17,C18orf8     PUM2,ASB7  RABEP1,MYH11  SETX,SPATS2L  XRCC5,TRIP12 
         both          both          both          both          both 
 ELF2,CHRNA10    LARP4,ANK2    MREG,KPNA6   ZNF197,CD53 
         both          both          both          both 
Levels: both nonCerebral cerebral

$labels
[1] "nonCerebral" "cerebral"   

> 
> #save(ktspPredictorRes, file = "./Objs/KTSP_Model_Cerebral.rda")
> load("./Objs/KTSP_Model_Cerebral.rda")
> 
> ###########################################################################
> ############################################################################
> ### Compute the sum and find the best threshold: All training samples
> ktspStatsTrainRes <- SWAP.KTSP.Statistics(inputMat = usedTrainMat, classifier = ktspPredictorRes, CombineFunc = sum)
> summary(ktspStatsTrainRes$statistics)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   1.000   3.000   3.095   5.000   8.000 
> 
> ### Threshold
> thr <- coords(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("nonCerebral", "cerebral"), direction = "<"), "best")["threshold"]
> thr
  threshold
1       3.5
> 
> ### Print ROC curve local maximas
> coords(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("nonCerebral", "cerebral"), direction = "<"), "local maximas")
  threshold specificity sensitivity
1      -Inf   0.0000000   1.0000000
2       0.5   0.2328767   0.9868421
3       1.5   0.4657534   0.9736842
4       2.5   0.6369863   0.9078947
5       3.5   0.8150685   0.8552632
6       4.5   0.9246575   0.6710526
7       5.5   0.9589041   0.4736842
8       6.5   1.0000000   0.2500000
> 
> ### Plot Curve: note that you must reorder the levels!!!
> ### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
> ROCTrain <- roc(usedTrainGroup, ktspStatsTrainRes$statistics, plot = T, print.thres=thr$threshold, print.auc=TRUE, print.auc.col="black", ci = T, levels = c("nonCerebral", "cerebral"), direction = "<", col="blue", lwd=2, grid=TRUE, main="Mechanistic KTSP performance in the training data")
> ROCTrain

Call:
roc.default(response = usedTrainGroup, predictor = ktspStatsTrainRes$statistics,     levels = c("nonCerebral", "cerebral"), direction = "<", ci = T,     plot = T, print.thres = thr$threshold, print.auc = TRUE,     print.auc.col = "black", col = "blue", lwd = 2, grid = TRUE,     main = "Mechanistic KTSP performance in the training data")

Data: ktspStatsTrainRes$statistics in 146 controls (usedTrainGroup nonCerebral) < 76 cases (usedTrainGroup cerebral).
Area under the curve: 0.8958
95% CI: 0.8522-0.9395 (DeLong)
> 
> ### Get predictions based on best threshold from ROC curve
> usedTrainPredictionRes <- SWAP.KTSP.Classify(usedTrainMat, ktspPredictorRes, DecisionFunc = function(x) sum(x) >= thr)
> 
> ### Resubstitution performance in the TRAINING set
> ConfusionTrain <- confusionMatrix(usedTrainPredictionRes, usedTrainGroup, positive = "cerebral", mode = "everything")
> ConfusionTrain
Confusion Matrix and Statistics

             Reference
Prediction    nonCerebral cerebral
  nonCerebral         119       11
  cerebral             27       65
                                          
               Accuracy : 0.8288          
                 95% CI : (0.7727, 0.8759)
    No Information Rate : 0.6577          
    P-Value [Acc > NIR] : 1.04e-08        
                                          
                  Kappa : 0.6381          
                                          
 Mcnemar's Test P-Value : 0.01496         
                                          
            Sensitivity : 0.8553          
            Specificity : 0.8151          
         Pos Pred Value : 0.7065          
         Neg Pred Value : 0.9154          
              Precision : 0.7065          
                 Recall : 0.8553          
                     F1 : 0.7738          
             Prevalence : 0.3423          
         Detection Rate : 0.2928          
   Detection Prevalence : 0.4144          
      Balanced Accuracy : 0.8352          
                                          
       'Positive' Class : cerebral        
                                          
> 
> MCC_Train <- mltools::mcc(pred = usedTrainPredictionRes, actuals = usedTrainGroup)
> MCC_Train
[1] 0.6456652
> 
> # Put the performance metrics together
> TrainPerf <- data.frame("Training" = c(ROCTrain$ci, ConfusionTrain$overall["Accuracy"], ConfusionTrain$byClass["Balanced Accuracy"], ConfusionTrain$byClass["Sensitivity"], ConfusionTrain$byClass["Specificity"], MCC_Train))
> TrainPerf[1:3, ] <- TrainPerf[c(2,1,3), ]
> rownames(TrainPerf) <- c("AUC", "AUC_CI_low", "AUC_CI_high", "Accuracy", "Bal.Accuracy", "Sensitivity", "Specificity", "MCC")
> 
> #########################################################################
> #########################################################################
> ### Testing
> 
> ## Compute the sum and find the best threshold
> ktspStatsTestRes <- SWAP.KTSP.Statistics(inputMat = usedTestMat, classifier = ktspPredictorRes, CombineFunc = sum)
> summary(ktspStatsTestRes$statistics)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   2.000   3.000   3.396   5.000   8.000 
> 
> ## Plot curve
> ROCTest <- roc(usedTestGroup, ktspStatsTestRes$statistics, plot = T, print.thres=thr$threshold, print.auc=TRUE, print.auc.col="black", ci = T, levels = c("nonCerebral", "cerebral"), direction = "<", col="blue", lwd=2, grid=TRUE, main= "Mechanistic KTSP using TF_MiR Gns")
> ROCTest

Call:
roc.default(response = usedTestGroup, predictor = ktspStatsTestRes$statistics,     levels = c("nonCerebral", "cerebral"), direction = "<", ci = T,     plot = T, print.thres = thr$threshold, print.auc = TRUE,     print.auc.col = "black", col = "blue", lwd = 2, grid = TRUE,     main = "Mechanistic KTSP using TF_MiR Gns")

Data: ktspStatsTestRes$statistics in 42 controls (usedTestGroup nonCerebral) < 54 cases (usedTestGroup cerebral).
Area under the curve: 0.7368
95% CI: 0.6376-0.8359 (DeLong)
> 
> ### Get predictions based on best threshold from ROC curve
> usedTestPredictionRes <- SWAP.KTSP.Classify(usedTestMat, ktspPredictorRes, DecisionFunc = function(x) sum(x) >= thr)
> 
> ### Resubstitution performance in the Test set
> ConfusionTest <- confusionMatrix(usedTestPredictionRes, usedTestGroup, positive = "cerebral", mode = "everything")
> ConfusionTest
Confusion Matrix and Statistics

             Reference
Prediction    nonCerebral cerebral
  nonCerebral          32       21
  cerebral             10       33
                                         
               Accuracy : 0.6771         
                 95% CI : (0.5739, 0.769)
    No Information Rate : 0.5625         
    P-Value [Acc > NIR] : 0.01449        
                                         
                  Kappa : 0.3625         
                                         
 Mcnemar's Test P-Value : 0.07249        
                                         
            Sensitivity : 0.6111         
            Specificity : 0.7619         
         Pos Pred Value : 0.7674         
         Neg Pred Value : 0.6038         
              Precision : 0.7674         
                 Recall : 0.6111         
                     F1 : 0.6804         
             Prevalence : 0.5625         
         Detection Rate : 0.3438         
   Detection Prevalence : 0.4479         
      Balanced Accuracy : 0.6865         
                                         
       'Positive' Class : cerebral       
                                         
> 
> MCC_Test <- mltools::mcc(pred = usedTestPredictionRes, actuals = usedTestGroup)
> MCC_Test
[1] 0.3721146
> 
> ## Group the performance metrics together
> TestPerf <- data.frame("Testing" = c(ROCTest$ci, ConfusionTest$overall["Accuracy"], ConfusionTest$byClass["Balanced Accuracy"], ConfusionTest$byClass["Sensitivity"], ConfusionTest$byClass["Specificity"], MCC_Test))
> TestPerf[1:3, ] <- TestPerf[c(2,1,3), ]
> rownames(TestPerf) <- c("AUC", "AUC_CI_low", "AUC_CI_high", "Accuracy", "Bal.Accuracy", "Sensitivity", "Specificity", "MCC")
> 
> ## Group the performance metrics of the classifier in one data frame
> CereberalKTSP_Perf <- cbind(TrainPerf, TestPerf)
> 
> # Save
> save(CereberalKTSP_Perf, file = "./Objs/CereberalKTSP_Perf.rda")
> 
> ########################################################################
> ########################################################################
> ## Plot AUC of both the agnostic and mechanistic classifiers using ggplot2
> ### Prepare the legend
> forLegend_KTSP <- apply(rbind(
+   ci(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("nonCerebral", "cerebral"), direction = "<")),
+   ci(roc(usedTestGroup, ktspStatsTestRes$statistics, levels = c("nonCerebral", "cerebral"), direction = "<"))
+ ),  1, function(x) {
+   x <- format(round(x, digits=2), nsmall=2)
+   paste("AUC: ", x[[2]], ";", "95% CI: ", x[[1]], "-", x[[3]])
+ })
> 
> 
> #################################################################
> ### ROC curves Using ggplot2
> 
> ### Training
> datTrn_KTSP <- melt(data.frame(
+   ## Training Group
+   Training=factor(usedTrainGroup, levels = c("nonCerebral", "cerebral")),
+   ## Mechanistic KTSP SUM training
+   KTSP.Training=ktspStatsTrainRes$statistics))
Using Training as id variables
> ### Change Colnames
> colnames(datTrn_KTSP) <- c("Status", "KTSP_type", "KTSP_sum")
> 
> 
> ### Testing
> datTst_KTSP <- melt(data.frame(
+   ## Testing group
+   Testing=factor(usedTestGroup, levels = c("nonCerebral", "cerebral")),
+   ## Mechanistic KTSP SUM training
+   KTSP.Testing=ktspStatsTestRes$statistics))
Using Testing as id variables
> ### Change Colnames
> colnames(datTst_KTSP) <- c("Status", "KTSP_type", "KTSP_sum")
> 
> ### Combine
> dat_KTSP <- rbind(datTrn_KTSP, datTst_KTSP)
> dat_KTSP$Status <- as.numeric(dat_KTSP$Status)-1
> 
> ### Replace levels
> levels(dat_KTSP$KTSP_type) <- gsub("\\.", "-", levels(dat_KTSP$KTSP_type))
> levels(dat_KTSP$KTSP_type) <- paste(levels(dat_KTSP$KTSP_type), forLegend_KTSP[c(1,2)])
> 
> #################################################################
> ### Plot Curve
> tiff("./Figs/AUCggplot_Cerebral.tiff",
+     width=2800, height=2500, res=300)
> ### Color
> myCol <- brewer.pal(3, "Dark2")[c(2,1)]
> ### Plot and legend titles
> plotTitle <- "Performance of the 9-TSPs cerebral malaria signature in the training and testing data"
> #legendTitle <- paste("Mechanistic (", nrow(ktspPredictorRes$TSPs), " pairs)",
> #                     "Agnostic (", nrow(ktspPredictorUnRes$TSPs), " pairs)",  sep="")
> ### Plot
> basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=KTSP_type,
+                                        linetype = KTSP_type)) +
+   geom_roc(cutoffs.at = seq(1,20,1)) +
+   style_roc(theme = theme_grey) + ggtitle(plotTitle) +
+   theme(plot.title = element_text(face="bold", size=14, hjust = 0.5),
+         axis.text=element_text(face="plain", size = 11),
+         axis.title=element_text(face="bold", size = 13),
+         legend.justification=c(1,0),  legend.position=c(1,0),
+         legend.background=element_rect(fill="lightblue1"),
+         legend.text=element_text(face="plain", size = 14),
+         legend.title = element_text(face="bold", size=0)) +
+   #scale_color_manual(legendTitle, values=rep(myCol, 2)) +
+   #scale_linetype_manual(legendTitle, values=rep(c("solid", "dotted"), each=2)) +
+   guides(colour = guide_legend(override.aes = list(size=3)))
> ### Plot
> basicplot_KTSP
> ### Close device
> dev.off()
pdf 
  2 
> 
> save(basicplot_KTSP, file = "./Objs/BasicPlot_KTSP_Cerebral.rda")
> 
> ##################################################################################################
> ### Heatmaps
> ##################################################################################################
> #### Make a heatmap of the TSPs expression in the 3 datasets
> 
> 
> Cerebral_Stats <- ktspStatsTestRes$comparisons
> Cerebral_Stats <- Cerebral_Stats*1
> 
> # Order the stats by the sum of votes
> NewOrder <- order(rowSums(Cerebral_Stats))
> Cerebral_Stats <- Cerebral_Stats[NewOrder, ]
> 
> #GroupCol <- ArrayGroup[NewOrder]
> #levels(GroupCol) <- c("red", "blue")
> 
> # Order the true class labels
> CerebralGroup <- usedTestGroup
> CerebralGroup <- CerebralGroup[NewOrder]
> 
> # Get the predicted class labels
> PredClass <- usedTestPredictionRes
> #PredClass <- factor(PredClass, levels = c("POS", "NEG")) 
> levels(PredClass) <- c("blue", "red")
> PredClass <- PredClass[NewOrder]
> # Check order 
> all(rownames(Cerebral_Stats) == names(PredClass)) # TRUE:: No Need to order them (Already ordered by sum of votes) 
[1] TRUE
> 
> # Plot
> png(filename = "./Figs/CerebralKTSP_Heatmap.png", width = 3000, height = 2000, res = 200)
> superheat(Cerebral_Stats, col.dendrogram = F, yr = rowSums(Cerebral_Stats), yr.plot.type  = "bar", left.label.text.col = c("blue", "red"), membership.rows = CerebralGroup, bottom.label.text.size = 3.5, yr.num.ticks = 6, yr.axis.name	= "Sum of votes", yr.obs.col = PredClass, title = "Heatmap for the TSPs votes in the testing data")
Warning messages:
1: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
2: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
3: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
4: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
> dev.off()
pdf 
  2 
> 
> ##########################
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats     graphics  grDevices datasets  utils     methods  
[8] base     

other attached packages:
 [1] superheat_0.1.0     dplyr_1.0.7         xtable_1.8-4       
 [4] mltools_0.3.5       enrichR_3.0         plotROC_2.2.1      
 [7] reshape_0.8.8       RColorBrewer_1.1-2  caret_6.0-88       
[10] ggplot2_3.3.5       lattice_0.20-44     limma_3.46.0       
[13] Biobase_2.50.0      BiocGenerics_0.36.0 switchBox_1.26.0   
[16] gplots_3.1.1        pROC_1.18.0        

loaded via a namespace (and not attached):
 [1] httr_1.4.2           splines_4.0.3        foreach_1.5.1       
 [4] prodlim_2019.11.13   gtools_3.9.2         assertthat_0.2.1    
 [7] stats4_4.0.3         renv_0.14.0          globals_0.14.0      
[10] ipred_0.9-11         pillar_1.6.2         glue_1.4.2          
[13] digest_0.6.27        colorspace_2.0-2     recipes_0.1.16      
[16] Matrix_1.3-4         plyr_1.8.6           timeDate_3043.102   
[19] pkgconfig_2.0.3      listenv_0.8.0        purrr_0.3.4         
[22] scales_1.1.1         gower_0.2.2          lava_1.6.10         
[25] tibble_3.1.4         proxy_0.4-26         generics_0.1.0      
[28] farver_2.1.0         ellipsis_0.3.2       withr_2.4.2         
[31] nnet_7.3-16          survival_3.2-13      magrittr_2.0.1      
[34] crayon_1.4.1         future_1.22.1        fansi_0.5.0         
[37] parallelly_1.28.1    nlme_3.1-152         MASS_7.3-54         
[40] class_7.3-19         tools_4.0.3          data.table_1.14.0   
[43] lifecycle_1.0.0      stringr_1.4.0        munsell_0.5.0       
[46] compiler_4.0.3       e1071_1.7-8          caTools_1.18.2      
[49] rlang_0.4.11         grid_4.0.3           iterators_1.0.13    
[52] rjson_0.2.20         labeling_0.4.2       bitops_1.0-7        
[55] gtable_0.3.0         ModelMetrics_1.2.2.2 codetools_0.2-18    
[58] DBI_1.1.1            curl_4.3.2           reshape2_1.4.4      
[61] R6_2.5.1             lubridate_1.7.10     future.apply_1.8.1  
[64] utf8_1.2.2           KernSmooth_2.23-20   stringi_1.7.4       
[67] Rcpp_1.0.7           vctrs_0.3.8          rpart_4.1-15        
[70] tidyselect_1.1.1    
> 
> proc.time()
   user  system elapsed 
  5.459   0.706   7.215 
