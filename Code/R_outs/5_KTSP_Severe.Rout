
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-apple-darwin17.0 (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

* Project '~/' loaded. [renv 0.13.2]
> ############################################################################
> 
> 
> rm(list = ls())
> 
> setwd("~/Documents/Research/Projects/Malaria")
> 
> renv::activate("~/Documents/Research/Projects/Malaria")
* Project '~/Documents/Research/Projects/Malaria' loaded. [renv 0.14.0]
Warning message:
renv 0.14.0 was loaded from project library, but this project is configured to use renv 0.12.2.
Use `renv::record("renv@0.14.0")` to record renv 0.14.0 in the lockfile.
Use `renv::restore(packages = "renv")` to install renv 0.12.2 into the project library. 
> 
> ### Load library
> require(switchBox)
Loading required package: switchBox
Loading required package: pROC
Type 'citation("pROC")' for a citation.

Attaching package: ‘pROC’

The following objects are masked from ‘package:stats’:

    cov, smooth, var

Loading required package: gplots

Attaching package: ‘gplots’

The following object is masked from ‘package:stats’:

    lowess

> require(Biobase)
Loading required package: Biobase
Loading required package: BiocGenerics
Loading required package: parallel

Attaching package: ‘BiocGenerics’

The following objects are masked from ‘package:parallel’:

    clusterApply, clusterApplyLB, clusterCall, clusterEvalQ,
    clusterExport, clusterMap, parApply, parCapply, parLapply,
    parLapplyLB, parRapply, parSapply, parSapplyLB

The following object is masked from ‘package:pROC’:

    var

The following objects are masked from ‘package:stats’:

    IQR, mad, sd, var, xtabs

The following objects are masked from ‘package:base’:

    anyDuplicated, append, as.data.frame, basename, cbind, colnames,
    dirname, do.call, duplicated, eval, evalq, Filter, Find, get, grep,
    grepl, intersect, is.unsorted, lapply, Map, mapply, match, mget,
    order, paste, pmax, pmax.int, pmin, pmin.int, Position, rank,
    rbind, Reduce, rownames, sapply, setdiff, sort, table, tapply,
    union, unique, unsplit, which.max, which.min

Welcome to Bioconductor

    Vignettes contain introductory material; view with
    'browseVignettes()'. To cite Bioconductor, see
    'citation("Biobase")', and for packages 'citation("pkgname")'.

> require(limma)
Loading required package: limma

Attaching package: ‘limma’

The following object is masked from ‘package:BiocGenerics’:

    plotMA

> require(pROC)
> require(caret)
Loading required package: caret
Loading required package: lattice
Loading required package: ggplot2
> require(RColorBrewer)
Loading required package: RColorBrewer
> require(ggplot2)
> require(reshape)
Loading required package: reshape
> require(plotROC)
Loading required package: plotROC

Attaching package: ‘plotROC’

The following object is masked from ‘package:pROC’:

    ggroc

> library(enrichR)
Welcome to enrichR
Checking connection ... 
Enrichr ... Connection is Live!
FlyEnrichr ... Connection is available!
WormEnrichr ... Connection is available!
YeastEnrichr ... Connection is available!
FishEnrichr ... Connection is available!
> library(mltools)
> library(xtable)
> library(dplyr)

Attaching package: ‘dplyr’

The following object is masked from ‘package:reshape’:

    rename

The following object is masked from ‘package:Biobase’:

    combine

The following objects are masked from ‘package:BiocGenerics’:

    combine, intersect, setdiff, union

The following objects are masked from ‘package:stats’:

    filter, lag

The following objects are masked from ‘package:base’:

    intersect, setdiff, setequal, union

> library(tidyr)

Attaching package: ‘tidyr’

The following object is masked from ‘package:mltools’:

    replace_na

The following objects are masked from ‘package:reshape’:

    expand, smiths

> library(tibble)
> library(ggplot2)
> library(superheat)
> 
> ## Load data
> load("./Objs/MalariaDataGood_Comp.rda")
> load("./Objs/batch.rda")
> 
> Comparison <- read.csv("./Objs/Comparison_Complicated.csv", row.names = 1)
> 
> # Quantile normalization
> usedTrainMat <- normalizeBetweenArrays(mixTrainMat, method = "quantile")
> usedTestMat <- normalizeBetweenArrays(mixTestMat, method = "quantile")
> 
> ##################################
> ## Boxplots 
> # training data
> mixTrainStudy <- data.frame(smp = colnames(mixTrainMat))
> mixTrainStudy <- merge(mixTrainStudy, allStudies, by = 'smp', no.dups = T)
>   
> colnames(mixTrainStudy) <- c('sample', 'dataset')
> 
> train_before <- mixTrainMat %>%
+   as.data.frame() %>%
+   rownames_to_column("genes") %>%      
+   gather(sample, expression, -genes) %>%
+   left_join(mixTrainStudy, by = "sample")
> 
> train_after <- usedTrainMat %>%
+   as.data.frame() %>%
+   rownames_to_column("genes") %>%      
+   gather(sample, expression, -genes) %>%
+   left_join(mixTrainStudy, by = "sample")
> 
> png(filename = './Figs/New/train_before.png', width = 2000, height = 1000, res = 150)
> train_before %>% ggplot(aes(x=sample, y=expression, fill=dataset)) +
+   geom_boxplot()
> dev.off()
null device 
          1 
> 
> png(filename = './Figs/New/train_after.png', width = 2000, height = 1000, res = 150)
> train_after %>% ggplot(aes(x=sample, y=expression, fill=dataset)) +
+   geom_boxplot()
> dev.off()
null device 
          1 
> 
> #######
> # testing data
> mixTestStudy <- data.frame(smp = colnames(mixTestMat))
> mixTestStudy <- merge(mixTestStudy, allStudies, by = 'smp', no.dups = T)
> 
> colnames(mixTestStudy) <- c('sample', 'dataset')
> 
> test_before <- mixTestMat %>%
+   as.data.frame() %>%
+   rownames_to_column("genes") %>%      
+   gather(sample, expression, -genes) %>%
+   left_join(mixTestStudy, by = "sample")
> 
> test_after <- usedTestMat %>%
+   as.data.frame() %>%
+   rownames_to_column("genes") %>%      
+   gather(sample, expression, -genes) %>%
+   left_join(mixTestStudy, by = "sample")
> 
> png(filename = './Figs/New/test_before.png', width = 2000, height = 1000, res = 150)
> test_before %>% ggplot(aes(x=sample, y=expression, fill=dataset)) +
+   geom_boxplot()
> dev.off()
null device 
          1 
> 
> png(filename = './Figs/New/test_after.png', width = 2000, height = 1000, res = 150)
> test_after %>% ggplot(aes(x=sample, y=expression, fill=dataset)) +
+   geom_boxplot()
> dev.off()
null device 
          1 
> 
> ####################################################################
> # Associated groups
> usedTrainGroup <- mixTrainGroup
> usedTestGroup <- mixTestGroup
> 
> # Load mechanistic pairs
> Up <- Comparison %>%
+   filter(up_or_down == "up") %>%
+   select(gene) %>%
+   pull()
> 
> Down <- Comparison %>%
+   filter(up_or_down == "down") %>%
+   select(gene) %>%
+   as.vector() %>%
+   pull()
> 
> myTSPs <- expand.grid(Up, Down)
> 
> myTSPs <- as.matrix(myTSPs)
> colnames(myTSPs) <- c("Up", "Down")
> 
> ### Common genes
> keepGns <- intersect(as.vector(myTSPs), rownames(usedTrainMat))
> 
> #UsedTrainMat <- UsedTrainMat[keepGns, ]
> #UsedTestMat <- UsedTestMat[keepGns, ]
> 
> ### For the TSP
> myTSPs <- myTSPs[myTSPs[,1] %in% keepGns & myTSPs[,2] %in% keepGns , ]
> 
> ###########################################################################
> ### TRAINING using restricted pairs
> ###########################################################################
> 
> ### Set Feature number and max k
> ktsp <- c(3:25) #8
> featNo <- nrow(usedTrainMat)
> 
> ### Train a classifier using default filtering function based on Wilcoxon
> set.seed(333)
> 
> ktspPredictorRes <- SWAP.Train.KTSP(
+   usedTrainMat, usedTrainGroup, krange=ktsp, featureNo= featNo, 
+   FilterFunc = SWAP.Filter.Wilcoxon, RestrictedPairs = myTSPs)
> 
> ktspPredictorRes
$name
[1] "10TSPS"

$TSPs
                gene1      gene2   
SLC38A2,SCML1   "SLC38A2"  "SCML1" 
SLC25A40,MAP2K7 "SLC25A40" "MAP2K7"
DNALI1,AGPAT3   "DNALI1"   "AGPAT3"
LIFR,TBCD       "LIFR"     "TBCD"  
STK17B,ORC2     "STK17B"   "ORC2"  
SF3B1,USP48     "SF3B1"    "USP48" 
ZNF148,ZCCHC2   "ZNF148"   "ZCCHC2"
CBX5,CHAF1A     "CBX5"     "CHAF1A"
CNOT7,PLXNA2    "CNOT7"    "PLXNA2"
CREM,IDH1       "CREM"     "IDH1"  

$score
  SLC38A2,SCML1 SLC25A40,MAP2K7   DNALI1,AGPAT3       LIFR,TBCD     STK17B,ORC2 
      0.3855052       0.3647981       0.3599478       0.3109785       0.2878464 
    SF3B1,USP48   ZNF148,ZCCHC2     CBX5,CHAF1A    CNOT7,PLXNA2       CREM,IDH1 
      0.2746946       0.2472717       0.2472717       0.2041787       0.1959706 

$tieVote
  SLC38A2,SCML1 SLC25A40,MAP2K7   DNALI1,AGPAT3       LIFR,TBCD     STK17B,ORC2 
           both            both            both            both            both 
    SF3B1,USP48   ZNF148,ZCCHC2     CBX5,CHAF1A    CNOT7,PLXNA2       CREM,IDH1 
           both            both            both            both            both 
Levels: both unComplicated Complicated

$labels
[1] "unComplicated" "Complicated"  

> 
> #save(ktspPredictorRes, file = "./Objs/KTSP_Model_Complicated.rda")
> #load("./Objs/KTSP_Model_Complicated.rda")
> 
> ###########################################################################
> ############################################################################
> ### Compute the sum and find the best threshold: All training samples
> ktspStatsTrainRes <- SWAP.KTSP.Statistics(inputMat = usedTrainMat, classifier = ktspPredictorRes, CombineFunc = sum)
> summary(ktspStatsTrainRes$statistics)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   3.000   5.000   4.775   6.000  10.000 
> 
> ### Threshold
> thr <- coords(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("unComplicated", "Complicated"), direction = "<"), "best")["threshold"]
> thr
  threshold
1       4.5
> 
> ### Print ROC curve local maximas
> coords(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("unComplicated", "Complicated"), direction = "<"), "local maximas")
  threshold specificity sensitivity
1       0.5  0.01408451   1.0000000
2       1.5  0.18309859   0.9933775
3       2.5  0.42253521   0.9668874
4       3.5  0.74647887   0.8874172
5       4.5  0.88732394   0.7549669
6       5.5  0.95774648   0.5827815
7       6.5  0.97183099   0.2980132
8       7.5  1.00000000   0.1523179
> 
> ### Plot Curve: note that you must reorder the levels!!!
> ### ("good" goes first, "bad" goes second, the opposite of confusionMatrix)
> ROCTrain <- roc(usedTrainGroup, ktspStatsTrainRes$statistics, plot = F, print.thres=thr$threshold, print.auc=TRUE, print.auc.col="black", ci = T, levels = c("unComplicated", "Complicated"), direction = "<", col="blue", lwd=2, grid=TRUE, main="Mechanistic KTSP performance in the training data")
> ROCTrain

Call:
roc.default(response = usedTrainGroup, predictor = ktspStatsTrainRes$statistics,     levels = c("unComplicated", "Complicated"), direction = "<",     ci = T, plot = F, print.thres = thr$threshold, print.auc = TRUE,     print.auc.col = "black", col = "blue", lwd = 2, grid = TRUE,     main = "Mechanistic KTSP performance in the training data")

Data: ktspStatsTrainRes$statistics in 71 controls (usedTrainGroup unComplicated) < 151 cases (usedTrainGroup Complicated).
Area under the curve: 0.8929
95% CI: 0.8483-0.9374 (DeLong)
> 
> ### Get predictions based on best threshold from ROC curve
> usedTrainPredictionRes <- SWAP.KTSP.Classify(usedTrainMat, ktspPredictorRes, DecisionFunc = function(x) sum(x) >= thr)
> 
> ### Resubstitution performance in the TRAINING set
> ConfusionTrain <- confusionMatrix(usedTrainPredictionRes, usedTrainGroup, positive = "Complicated", mode = "everything")
> ConfusionTrain
Confusion Matrix and Statistics

               Reference
Prediction      unComplicated Complicated
  unComplicated            63          37
  Complicated               8         114
                                          
               Accuracy : 0.7973          
                 95% CI : (0.7383, 0.8481)
    No Information Rate : 0.6802          
    P-Value [Acc > NIR] : 6.971e-05       
                                          
                  Kappa : 0.5796          
                                          
 Mcnemar's Test P-Value : 2.993e-05       
                                          
            Sensitivity : 0.7550          
            Specificity : 0.8873          
         Pos Pred Value : 0.9344          
         Neg Pred Value : 0.6300          
              Precision : 0.9344          
                 Recall : 0.7550          
                     F1 : 0.8352          
             Prevalence : 0.6802          
         Detection Rate : 0.5135          
   Detection Prevalence : 0.5495          
      Balanced Accuracy : 0.8211          
                                          
       'Positive' Class : Complicated     
                                          
> 
> MCC_Train <- mltools::mcc(pred = usedTrainPredictionRes, actuals = usedTrainGroup)
> MCC_Train
[1] 0.6021011
> 
> # Put the performance metrics together
> TrainPerf <- data.frame("Training" = c(ROCTrain$ci, ConfusionTrain$overall["Accuracy"], ConfusionTrain$byClass["Balanced Accuracy"], ConfusionTrain$byClass["Sensitivity"], ConfusionTrain$byClass["Specificity"], MCC_Train))
> TrainPerf[1:3, ] <- TrainPerf[c(2,1,3), ]
> rownames(TrainPerf) <- c("AUC", "AUC_CI_low", "AUC_CI_high", "Accuracy", "Bal.Accuracy", "Sensitivity", "Specificity", "MCC")
> 
> #########################################################################
> #########################################################################
> ### Testing
> 
> ## Compute the sum and find the best threshold
> ktspStatsTestRes <- SWAP.KTSP.Statistics(inputMat = usedTestMat, classifier = ktspPredictorRes, CombineFunc = sum)
> summary(ktspStatsTestRes$statistics)
   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. 
  0.000   4.000   5.000   4.698   6.000   9.000 
> 
> ## Plot curve
> ROCTest <- roc(usedTestGroup, ktspStatsTestRes$statistics, plot = T, print.thres=thr$threshold, print.auc=TRUE, print.auc.col="black", ci = T, levels = c("unComplicated", "Complicated"), direction = "<", col="blue", lwd=2, grid=TRUE, main= "Mechanistic KTSP using TF_MiR Gns")
> ROCTest

Call:
roc.default(response = usedTestGroup, predictor = ktspStatsTestRes$statistics,     levels = c("unComplicated", "Complicated"), direction = "<",     ci = T, plot = T, print.thres = thr$threshold, print.auc = TRUE,     print.auc.col = "black", col = "blue", lwd = 2, grid = TRUE,     main = "Mechanistic KTSP using TF_MiR Gns")

Data: ktspStatsTestRes$statistics in 21 controls (usedTestGroup unComplicated) < 75 cases (usedTestGroup Complicated).
Area under the curve: 0.681
95% CI: 0.5501-0.8118 (DeLong)
> 
> ### Get predictions based on best threshold from ROC curve
> usedTestPredictionRes <- SWAP.KTSP.Classify(usedTestMat, ktspPredictorRes, DecisionFunc = function(x) sum(x) >= thr)
> 
> ### Resubstitution performance in the Test set
> ConfusionTest <- confusionMatrix(usedTestPredictionRes, usedTestGroup, positive = "Complicated", mode = "everything")
> ConfusionTest
Confusion Matrix and Statistics

               Reference
Prediction      unComplicated Complicated
  unComplicated            15          27
  Complicated               6          48
                                          
               Accuracy : 0.6562          
                 95% CI : (0.5523, 0.7502)
    No Information Rate : 0.7812          
    P-Value [Acc > NIR] : 0.9983328       
                                          
                  Kappa : 0.2605          
                                          
 Mcnemar's Test P-Value : 0.0004985       
                                          
            Sensitivity : 0.6400          
            Specificity : 0.7143          
         Pos Pred Value : 0.8889          
         Neg Pred Value : 0.3571          
              Precision : 0.8889          
                 Recall : 0.6400          
                     F1 : 0.7442          
             Prevalence : 0.7812          
         Detection Rate : 0.5000          
   Detection Prevalence : 0.5625          
      Balanced Accuracy : 0.6771          
                                          
       'Positive' Class : Complicated     
                                          
> 
> MCC_Test <- mltools::mcc(pred = usedTestPredictionRes, actuals = usedTestGroup)
> MCC_Test
[1] 0.2952381
> 
> ## Group the performance metrics together
> TestPerf <- data.frame("Testing" = c(ROCTest$ci, ConfusionTest$overall["Accuracy"], ConfusionTest$byClass["Balanced Accuracy"], ConfusionTest$byClass["Sensitivity"], ConfusionTest$byClass["Specificity"], MCC_Test))
> TestPerf[1:3, ] <- TestPerf[c(2,1,3), ]
> rownames(TestPerf) <- c("AUC", "AUC_CI_low", "AUC_CI_high", "Accuracy", "Bal.Accuracy", "Sensitivity", "Specificity", "MCC")
> 
> ## Group the performance metrics of the classifier in one data frame
> CompKTSP_Perf <- cbind(TrainPerf, TestPerf)
> 
> # Save
> save(CompKTSP_Perf, file = "./Objs/CompKTSP_Perf.rda")
> 
> ########################################################################
> ########################################################################
> ## Plot AUC of both the agnostic and mechanistic classifiers using ggplot2
> ### Prepare the legend
> forLegend_KTSP <- apply(rbind(
+   ci(roc(usedTrainGroup, ktspStatsTrainRes$statistics, levels = c("unComplicated", "Complicated"), direction = "<")),
+   ci(roc(usedTestGroup, ktspStatsTestRes$statistics, levels = c("unComplicated", "Complicated"), direction = "<"))
+ ),  1, function(x) {
+   x <- format(round(x, digits=2), nsmall=2)
+   paste("AUC: ", x[[2]], ";", "95% CI: ", x[[1]], "-", x[[3]])
+ })
> 
> 
> #################################################################
> ### ROC curves Using ggplot2
> 
> ### Training
> datTrn_KTSP <- melt(data.frame(
+   ## Training Group
+   Training=factor(usedTrainGroup, levels = c("unComplicated", "Complicated")),
+   ## Mechanistic KTSP SUM training
+   KTSP.Training=ktspStatsTrainRes$statistics))
Using Training as id variables
> ### Change Colnames
> colnames(datTrn_KTSP) <- c("Status", "KTSP_type", "KTSP_sum")
> 
> 
> ### Testing
> datTst_KTSP <- melt(data.frame(
+   ## Testing group
+   Testing=factor(usedTestGroup, levels = c("unComplicated", "Complicated")),
+   ## Mechanistic KTSP SUM training
+   KTSP.Testing=ktspStatsTestRes$statistics))
Using Testing as id variables
> ### Change Colnames
> colnames(datTst_KTSP) <- c("Status", "KTSP_type", "KTSP_sum")
> 
> ### Combine
> dat_KTSP <- rbind(datTrn_KTSP, datTst_KTSP)
> dat_KTSP$Status <- as.numeric(dat_KTSP$Status)-1
> 
> ### Replace levels
> levels(dat_KTSP$KTSP_type) <- gsub("\\.", "-", levels(dat_KTSP$KTSP_type))
> levels(dat_KTSP$KTSP_type) <- paste(levels(dat_KTSP$KTSP_type), forLegend_KTSP[c(1,2)])
> 
> #################################################################
> ### Plot Curve
> tiff("./Figs/AUCggplot_Severe.tiff",
+      width=2800, height=2500, res=300)
> ### Color
> myCol <- brewer.pal(3, "Dark2")[c(2,1)]
> ### Plot and legend titles
> plotTitle <- "Performance of the 10-TSPs severe malaria signature in the training and testing data"
> #legendTitle <- paste("Mechanistic (", nrow(ktspPredictorRes$TSPs), " pairs)",
> #                     "Agnostic (", nrow(ktspPredictorUnRes$TSPs), " pairs)",  sep="")
> ### Plot
> basicplot_KTSP <- ggplot(dat_KTSP, aes(d=Status, m=KTSP_sum, color=KTSP_type,
+                                        linetype = KTSP_type)) +
+   geom_roc(cutoffs.at = seq(1,20,1)) +
+   style_roc(theme = theme_grey) + ggtitle(plotTitle) +
+   theme(plot.title = element_text(face="bold", size=14, hjust = 0.5),
+         axis.text=element_text(face="plain", size = 11),
+         axis.title=element_text(face="bold", size = 13),
+         legend.justification=c(1,0),  legend.position=c(1,0),
+         legend.background=element_rect(fill="lightblue1"),
+         legend.text=element_text(face="plain", size = 14),
+         legend.title = element_text(face="bold", size=0)) +
+   #scale_color_manual(legendTitle, values=rep(myCol, 2)) +
+   #scale_linetype_manual(legendTitle, values=rep(c("solid", "dotted"), each=2)) +
+   guides(colour = guide_legend(override.aes = list(size=3)))
> ### Plot
> basicplot_KTSP
> ### Close device
> dev.off()
pdf 
  2 
> 
> save(basicplot_KTSP, file = "./Objs/BasicPlot_KTSP_Severe.rda")
> 
> ##################################################################################################
> ### Heatmaps
> ##################################################################################################
> #### Make a heatmap of the TSPs expression in the 3 datasets
> 
> 
> Complicated_Stats <- ktspStatsTestRes$comparisons
> Complicated_Stats <- Complicated_Stats*1
> 
> # Order the stats by the sum of votes
> NewOrder <- order(rowSums(Complicated_Stats))
> Complicated_Stats <- Complicated_Stats[NewOrder, ]
> 
> #GroupCol <- ArrayGroup[NewOrder]
> #levels(GroupCol) <- c("red", "blue")
> 
> # Order the true class labels
> CompGroup <- usedTestGroup
> levels(CompGroup) <- c('non-severe', 'severe')
> CompGroup <- CompGroup[NewOrder]
> 
> # Get the predicted class labels
> PredClass <- usedTestPredictionRes
> #PredClass <- factor(PredClass, levels = c("POS", "NEG")) 
> levels(PredClass) <- c("blue", "red")
> PredClass <- PredClass[NewOrder]
> # Check order 
> all(rownames(Complicated_Stats) == names(PredClass)) # TRUE:: No Need to order them (Already ordered by sum of votes) 
[1] TRUE
> 
> # Plot
> png(filename = "./Figs/new/SevereKTSP_Heatmap.png", width = 3000, height = 2000, res = 200)
> superheat(Complicated_Stats, col.dendrogram = F, yr = rowSums(Complicated_Stats), yr.plot.type  = "bar", left.label.text.col = c("blue", "red"), membership.rows = CompGroup, bottom.label.text.size = 2.5, yr.num.ticks = 6, yr.axis.name	= "Sum of votes", yr.obs.col = PredClass, title = "Heatmap for the TSPs votes in the testing data")
Warning messages:
1: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
2: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
3: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
4: In regularize.values(x, y, ties, missing(ties), na.rm = na.rm) :
  collapsing to unique 'x' values
> dev.off()
pdf 
  2 
> 
> ##############################
> sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-apple-darwin17.0 (64-bit)
Running under: macOS Big Sur 10.16

Matrix products: default
BLAS:   /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRblas.dylib
LAPACK: /Library/Frameworks/R.framework/Versions/4.0/Resources/lib/libRlapack.dylib

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] parallel  stats     graphics  grDevices datasets  utils     methods  
[8] base     

other attached packages:
 [1] superheat_0.1.0     tibble_3.1.4        tidyr_1.1.3        
 [4] dplyr_1.0.7         xtable_1.8-4        mltools_0.3.5      
 [7] enrichR_3.0         plotROC_2.2.1       reshape_0.8.8      
[10] RColorBrewer_1.1-2  caret_6.0-88        ggplot2_3.3.5      
[13] lattice_0.20-44     limma_3.46.0        Biobase_2.50.0     
[16] BiocGenerics_0.36.0 switchBox_1.26.0    gplots_3.1.1       
[19] pROC_1.18.0        

loaded via a namespace (and not attached):
 [1] httr_1.4.2           splines_4.0.3        foreach_1.5.1       
 [4] prodlim_2019.11.13   gtools_3.9.2         assertthat_0.2.1    
 [7] stats4_4.0.3         renv_0.14.0          globals_0.14.0      
[10] ipred_0.9-11         pillar_1.6.2         glue_1.4.2          
[13] digest_0.6.27        colorspace_2.0-2     recipes_0.1.16      
[16] Matrix_1.3-4         plyr_1.8.6           timeDate_3043.102   
[19] pkgconfig_2.0.3      listenv_0.8.0        purrr_0.3.4         
[22] scales_1.1.1         gower_0.2.2          lava_1.6.10         
[25] proxy_0.4-26         generics_0.1.0       farver_2.1.0        
[28] ellipsis_0.3.2       withr_2.4.2          nnet_7.3-16         
[31] survival_3.2-13      magrittr_2.0.1       crayon_1.4.1        
[34] future_1.22.1        fansi_0.5.0          parallelly_1.28.1   
[37] nlme_3.1-152         MASS_7.3-54          class_7.3-19        
[40] tools_4.0.3          data.table_1.14.0    lifecycle_1.0.0     
[43] stringr_1.4.0        munsell_0.5.0        e1071_1.7-8         
[46] compiler_4.0.3       caTools_1.18.2       rlang_0.4.11        
[49] grid_4.0.3           iterators_1.0.13     rjson_0.2.20        
[52] bitops_1.0-7         labeling_0.4.2       gtable_0.3.0        
[55] ModelMetrics_1.2.2.2 codetools_0.2-18     DBI_1.1.1           
[58] curl_4.3.2           reshape2_1.4.4       R6_2.5.1            
[61] lubridate_1.7.10     future.apply_1.8.1   utf8_1.2.2          
[64] KernSmooth_2.23-20   stringi_1.7.4        Rcpp_1.0.7          
[67] vctrs_0.3.8          rpart_4.1-15         tidyselect_1.1.1    
> 
> proc.time()
   user  system elapsed 
 12.648   1.828  16.181 
