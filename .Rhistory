load("./Objs/RF_Comp.rda")
#################
## Predict in the Dengue dataset (DHF vs DF)
TestingData_Dengue <- t(Expr_Dengue4)
PredVotes_Dengue <- predict(RF_Comp, newdata = TestingData_Dengue, type = "vote")
PredResponse_Dengue <- predict(RF_Comp, TestingData_Dengue, type="response")
ROCTest <- roc(ClassDFvsnormal, PredVotes_Dengue[,2], plot = F, print.auc = TRUE, levels = c("control", "case"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
# For ROC and PRC curves
sscurves_Dengue4 <- evalmod(scores = PredVotes_Dengue[,2], labels = ClassDFvsnormal)
sscurves_Dengue4
ROC_Dengue4 <- autoplot(sscurves_Dengue4, curvetype = c("ROC")) + labs(title = "ROC curve of the complicated malaria signature in GSE18090 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.43"), size = 3)
PRC_Dengue4 <- autoplot(sscurves_Dengue4, curvetype = c("PRC")) + labs(title = "PRC curve of the complicated malaria signature in GSE18090 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.725"), size = 3)
save(ROC_Dengue4, PRC_Dengue4, file = "./Objs/Dengue4_Curves.rda")
rm(list = ls())
load("./Data/DengueDataset3.rda")
Expr_Dengue3 <- exprs(DengueDataset3)
Pheno_Dengue3 <- pData(DengueDataset3)
FeatData_Dengue3 <- fData(DengueDataset3)
############################
## Annotation
## Expr_Dengue3
head(rownames(Expr_Dengue3))
rownames(Expr_Dengue3) <- FeatData_Dengue3$`Gene symbol`
summary(is.na(rownames(Expr_Dengue3)))
#rownames(Expr_Dengue3) <- gsub("-","", rownames(Expr_Dengue3))
#rownames(Expr_Dengue3) <- gsub("_","",rownames(Expr_Dengue3))
sel <- which(apply(Expr_Dengue3, 1, function(x) all(is.finite(x)) ))
Expr_Dengue3 <- Expr_Dengue3[sel, ]
Expr_Dengue3 <- Expr_Dengue3[!is.na(rownames(Expr_Dengue3)),]
dim(Expr_Dengue3)
range(Expr_Dengue3)
Expr_Dengue3 <- log2(Expr_Dengue3 + 65)
#plot(density(Expr_Dengue3))
#boxplot(Expr_Dengue3)
# X1 <- Expr_Dengue3
# ffun <- filterfun(pOverA(p = 0.5, A = 100))
# filt1 <- genefilter(2^X1,ffun)
# Expr_Dengue3 <- Expr_Dengue3[filt1,]
#
Expr_Dengue3 <- t(scale(t(Expr_Dengue3), center = TRUE, scale = TRUE))
####################################
########################################################################################
#########################################################################################
###### DSS vs DF
### Modify the phenotype
# Pheno1
Pheno_Dengue3$DiseaseStatus2 <- as.factor(Pheno_Dengue3$`disease state:ch1`)
levels(Pheno_Dengue3$DiseaseStatus2) <- c("DSS", "DF")
table(Pheno_Dengue3$DiseaseStatus2)
Pheno_Dengue3$DiseaseStatus2 <- factor(Pheno_Dengue3$DiseaseStatus2, levels = c("DF", "DSS"))
#Expr_Dengue3 <- Expr_Dengue3[, colnames(Expr_Dengue3) %in% rownames(Pheno_Dengue3)]
all(rownames(Pheno_Dengue3) == colnames(Expr_Dengue3))
ClassDSSvsDF <- Pheno_Dengue3$DiseaseStatus2
####################################
## Load the complicated malaria signature
load("./Objs/RF_Comp.rda")
#################
## Predict in the Dengue dataset (DHF vs DF)
TestingData_Dengue <- t(Expr_Dengue3)
PredVotes_Dengue <- predict(RF_Comp, newdata = TestingData_Dengue, type = "vote")
PredResponse_Dengue <- predict(RF_Comp, TestingData_Dengue, type="response")
ROCTest <- roc(ClassDSSvsDF, PredVotes_Dengue[,2], plot = F, print.auc = TRUE, levels = c("DF", "DSS"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
# For ROC and PRC curves
sscurves_Dengue3 <- evalmod(scores = PredVotes_Dengue[,2], labels = ClassDSSvsDF)
sscurves_Dengue3
ROC_Dengue3 <- autoplot(sscurves_Dengue3, curvetype = c("ROC")) + labs(title = "ROC curve of the complicated malaria signature in GSE25001 (DF vs DSS)") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.48"), size = 3)
PRC_Dengue3 <- autoplot(sscurves_Dengue3, curvetype = c("PRC")) + labs(title = "PRC curve of the complicated malaria signature in GSE25001 (DF vs DSS)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.32"), size = 3)
save(ROC_Dengue3, PRC_Dengue3, file = "./Objs/Dengue3_Curves.rda")
rm(list = ls())
load("./Data/DengueDataset2.rda")
Expr_Dengue2 <- exprs(DengueDataset2)
Pheno_Dengue2 <- pData(DengueDataset2)
FeatData_Dengue2 <- fData(DengueDataset2)
############################
## Annotation
## Expr_Dengue2
head(rownames(Expr_Dengue2))
rownames(Expr_Dengue2) <- FeatData_Dengue2$ORF
summary(is.na(rownames(Expr_Dengue2)))
#rownames(Expr_Dengue2) <- gsub("-","", rownames(Expr_Dengue2))
#rownames(Expr_Dengue2) <- gsub("_","",rownames(Expr_Dengue2))
sel <- which(apply(Expr_Dengue2, 1, function(x) all(is.finite(x)) ))
Expr_Dengue2 <- Expr_Dengue2[sel, ]
Expr_Dengue2 <- Expr_Dengue2[!is.na(rownames(Expr_Dengue2)),]
dim(Expr_Dengue2)
range(Expr_Dengue2)  # I think already Z-transformed
#Expr_Dengue2 <- t(scale(t(Expr_Dengue2), center = TRUE, scale = TRUE))
####################################
### Modify the phenotype
# Denge Fever and DHF vs Healthy
# Pheno1
Pheno_Dengue2$DiseaseStatus <- as.factor(Pheno_Dengue2$`disease state:ch2`)
levels(Pheno_Dengue2$DiseaseStatus) <- c("case", "case", "control")
table(Pheno_Dengue2$DiseaseStatus)
Pheno_Dengue2$DiseaseStatus <- factor(Pheno_Dengue2$DiseaseStatus, levels = c("control", "case"))
#expr1 <- expr1[, colnames(expr1) %in% rownames(Pheno_Dengue2)]
#all(rownames(Pheno_Dengue2) == colnames(expr1))
ClassDengueVsNormal <- Pheno_Dengue2$DiseaseStatus
####################################
## Load the model
load("./Objs/RF_Comp.rda")
## Some features (2) are present in the RF model but not in the expression matrix >> removed them
CommonGns <- intersect(rownames(Expr_Dengue2), rownames(RF_Comp$importance))
RF_Comp$importance <- RF_Comp$importance[CommonGns, ]
RF_Comp$importanceSD <- RF_Comp$importanceSD[CommonGns, ]
RF_Comp$forest$ncat <- RF_Comp$forest$ncat[CommonGns]
#################
## Predict in the Dengue dataset (Dengue vs normal)
TestingData_Dengue <- t(Expr_Dengue2)
PredVotes_Dengue <- predict(RF_Comp, newdata = TestingData_Dengue, type = "vote")
PredResponse_Dengue <- predict(RF_Comp, TestingData_Dengue, type="response")
ROCTest <- roc(ClassDengueVsNormal, PredVotes_Dengue[,2], plot = F, print.auc = TRUE, levels = c("control", "case"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
# For ROC and PRC curves
sscurves_Dengue2 <- evalmod(scores = PredVotes_Dengue[,2], labels = ClassDengueVsNormal)
sscurves_Dengue2
ROC_Dengue2 <- autoplot(sscurves_Dengue2, curvetype = c("ROC")) + labs(title = "ROC curve of the complicated malaria signature in GSE96656 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.32"), size = 3)
PRC_Dengue2 <- autoplot(sscurves_Dengue2, curvetype = c("PRC")) + labs(title = "PRC curve of the complicated malaria signature in GSE96656 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.67"), size = 3)
save(ROC_Dengue2, PRC_Dengue2, file = "./Objs/Dengue2_Curves.rda")
rm(list = ls())
load("./Data/DengueDataset1.rda")
Expr_Dengue1 <- exprs(DengueDataset1)
Pheno_Dengue1 <- pData(DengueDataset1)
FeatData_Dengue1 <- fData(DengueDataset1)
############################
## Annotation
## Expr_Dengue1
head(rownames(Expr_Dengue1))
rownames(Expr_Dengue1) <- FeatData_Dengue1$`Gene symbol`
summary(is.na(rownames(Expr_Dengue1)))
#rownames(Expr_Dengue1) <- gsub("-","", rownames(Expr_Dengue1))
#rownames(Expr_Dengue1) <- gsub("_","",rownames(Expr_Dengue1))
sel <- which(apply(Expr_Dengue1, 1, function(x) all(is.finite(x)) ))
Expr_Dengue1 <- Expr_Dengue1[sel, ]
Expr_Dengue1 <- Expr_Dengue1[!is.na(rownames(Expr_Dengue1)),]
dim(Expr_Dengue1)
range(Expr_Dengue1)
#plot(density(Expr_Dengue1))
#boxplot(Expr_Dengue1)
# X1 <- Expr_Dengue1
# ffun <- filterfun(pOverA(p = 0.5, A = 100))
# filt1 <- genefilter(2^X1,ffun)
# Expr_Dengue1 <- Expr_Dengue1[filt1,]
#
Expr_Dengue1 <- t(scale(t(Expr_Dengue1), center = TRUE, scale = TRUE))
####################################
### Modify the phenotype
# Control and convalescent VS DF and DHF
# Pheno1
Pheno_Dengue1$DiseaseStatus <- as.factor(Pheno_Dengue1$`status:ch1`)
levels(Pheno_Dengue1$DiseaseStatus) <- c("control", "control", "case", "case")
table(Pheno_Dengue1$DiseaseStatus)
#expr1 <- expr1[, colnames(expr1) %in% rownames(Pheno_Dengue1)]
#all(rownames(Pheno_Dengue1) == colnames(expr1))
ClassDengueVsNormal <- Pheno_Dengue1$DiseaseStatus
####################################
## Load the model
load("./Objs/RF_Comp.rda")
TestingData_Dengue <- t(Expr_Dengue1)
PredVotes_Dengue <- predict(RF_Comp, newdata = TestingData_Dengue, type = "vote")
PredResponse_Dengue <- predict(RF_Comp, TestingData_Dengue, type="response")
ROCTest <- roc(ClassDengueVsNormal, PredVotes_Dengue[,2], plot = F, print.auc = TRUE, levels = c("control", "case"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
# For ROC and PRC curves
sscurves_Dengue1 <- evalmod(scores = PredVotes_Dengue[,2], labels = ClassDengueVsNormal)
sscurves_Dengue1
ROC_Dengue <- autoplot(sscurves_Dengue1, curvetype = c("ROC")) + labs(title = "ROC curve of the complicated malaria signature in GSE51808 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.52"), size = 3)
PRC_Dengue <- autoplot(sscurves_Dengue1, curvetype = c("PRC")) + labs(title = "PRC curve of the complicated malaria signature in GSE51808 (Dengue fever)") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.54"), size = 3)
save(ROC_Dengue, PRC_Dengue, file = "./Objs/Dengue1_Curves.rda")
rm(list = ls())
load("./Objs/Dengue1_Curves.rda")
load("./Objs/Dengue2_Curves.rda")
load("./Objs/Dengue3_Curves.rda")
load("./Objs/Dengue4_Curves.rda")
load("./Objs/Dengue5_Curves.rda")
load("./Objs/Dengue6_Curves.rda")
## Many infections
load("./Objs/Adenovirus1_Curves.rda")
load("./Objs/ManyInfections1_Curves.rda")
load("./Objs/ManyInfections2_Curves.rda")
load("./Objs/ManyInfections3_Curves.rda")
## TB
load("./Objs/TB1_Curves.rda")
load("./Objs/TB2_Curves.rda")
load("./Objs/TB3_Curves.rda")
load("./Objs/TB4_Curves.rda")
# TB and HIV
load("./Objs/HIVandTB_Curves.rda")
# West Nile virus
load("./Objs/WestNile1_Curves.rda")
#############################################
ROC_Dengue$labels$title <- "GSE51808 (DF vs healthy)"
ROC_Dengue$theme$plot.title$size <- 6
ROC_Dengue2$labels$title <- "GSE96656 (DF vs healthy)"
ROC_Dengue2$theme$plot.title$size <- 6
ROC_Dengue3$labels$title <- "GSE25001 (un-complicated vs complicated DF)"
ROC_Dengue3$theme$plot.title$size <- 5
ROC_Dengue4$labels$title <- "GSE18090 (DF vs healthy)"
ROC_Dengue4$theme$plot.title$size <- 6
ROC_Dengue5$labels$title <- "GSE17924 (un-complicated vs complicated DF)"
ROC_Dengue5$theme$plot.title$size <- 5
ROC_Dengue6$labels$title <- "GSE13052 (un-complicated vs complicated DF)"
ROC_Dengue6$theme$plot.title$size <- 5
ROC_Adenovirus$labels$title <- "GSE40396 (Bacterial and viral infections vs healthy)"
ROC_Adenovirus$theme$plot.title$size <- 6
ROC_ManyInfections1$labels$title <- "GSE42026 (Bacterial and viral infections vs healthy)"
ROC_ManyInfections1$theme$plot.title$size <- 6
ROC_ManyInfections2$labels$title <- "GSE6269-GPL96 (Bacterial and viral infections vs healthy)"
ROC_ManyInfections2$theme$plot.title$size <- 6
ROC_ManyInfections3$labels$title <- "GSE63990 (Bacterial and viral infections vs healthy)"
ROC_ManyInfections3$theme$plot.title$size <- 6
ROC_TB1$labels$title <- "GSE19444"
ROC_TB2$labels$title <- "GSE73408"
ROC_TB3$labels$title <- "GSE62525"
ROC_TB4$labels$title <- "GSE83456"
ROC_HIVandTB$labels$title <- "GSE39940 (HIV/TB vs healthy)"
ROC_HIVandTB$theme$plot.title$size <- 6
ROC_WestNile$labels$title <- "GSE46681 (Asymptomatic vs severe West Nile viral infection)"
ROC_WestNile$theme$plot.title$size <- 6
##############################################
## Dengue Fever
tiff(filename = "./Figs/CompMalariaSigPerformance_Dengue.tiff", width = 2500, height = 2000, res = 350)
((ROC_Dengue / ROC_Dengue2 & theme(plot.tag = element_text(size = 8))) | (ROC_Dengue4 / ROC_Dengue3 & theme(plot.tag = element_text(size = 8))) | (ROC_Dengue5 / ROC_Dengue6 & theme(plot.tag = element_text(size = 8))
)) +
#plot_layout(widths = c(0.4, 1)) +
plot_annotation(
title = 'The performance of the severe malaria signatures in dengue fever datasets',
tag_levels = c('A', '1'),
theme = theme(plot.title = element_text(size = 12, face = "bold"))
)
dev.off()
rm(list = ls())
load("./Objs/MalariaDataGood_Comp.rda")
load("./Objs/PlacentalMalaria.rda")
load("./Objs/ExtraMalaria.rda")
# Quantile normalization
usedTrainMat <- normalizeBetweenArrays(mixTrainMat, method = "quantile")
usedTestMat <- normalizeBetweenArrays(mixTestMat, method = "quantile")
# Associated groups
usedTrainGroup <- mixTrainGroup
usedTestGroup <- mixTestGroup
# Transpose the matrix
PredictorData <- t(usedTrainMat)
# Bind expression with the groups
DataTrain <- cbind(PredictorData, usedTrainGroup)
DataTrain <- as.data.frame(DataTrain)
DataTrain$usedTrainGroup <- as.factor(DataTrain$usedTrainGroup)
levels(DataTrain[, "usedTrainGroup"]) <- c("unComplicated", "Complicated")
names(DataTrain) <- make.names(names(DataTrain))
# Feature selection via RRF
lambda <- 0.8 # Both the number of features and the quality of the features are quite sensitive to lambda for RRF. A smaller lambda leads to fewer features.
# The function for bootstraping
# RF_Strap <- function(data, indices) {
#   d <- data[indices, ] # allows boot to select sample
#   rrf <- RRF(usedTrainGroup~., data = d, flagReg = 1, coefReg=lambda) # coefReg is a constant for all variables.   #either "X,as.factor(class)" or data frame like "Y~., data=data" is fine, but the later one is significantly slower.
#   TrainData <- d
#   TrainData$usedTrainGroup <- NULL
#   subsetRRF <- rrf$feaSet
#   SelFeats <- colnames(TrainData[, subsetRRF])
#   return(as.vector(SelFeats[1:30]))
# }
#
# set.seed(333)
# bootobject_Comp <- boot(data = DataTrain, statistic = RF_Strap, R = 100, parallel = "multicore", ncpus = 15)
#
#
# save(bootobject_Comp, file = "./Objs/bootobject_Comp.rda")
load("./Objs/bootobject_Comp.rda")
OutFeat <- bootobject_Comp$t
#####################################
## Select the most frequent features
u_genes <- na.omit(unique(as.vector(as.matrix(OutFeat))))
find_gen_rep <- function(dat, gene){
# NAs create problems in the function so we substitute that with "unknown"
dat[is.na(dat)] <- "unknown"
rep_rows <- sum(apply(dat, 1,  function(x) any(x == gene)))
names(rep_rows) <- gene
as.data.frame(rep_rows)
}
list_results <- lapply(u_genes, find_gen_rep, dat = OutFeat)
sum_result <- do.call(rbind, list_results)
sum_result$Gene <- rownames(sum_result)
sum_result <- sum_result[sum_result$rep_rows >= 5, ]
Sel <- sum_result$Gene
Sel
usedTrainMat_Filt <- usedTrainMat[Sel, ]
usedTestMat_Filt <- usedTestMat[Sel, ]
# Transpose the matrices
PredictorData_Filt <- t(usedTrainMat_Filt)
TestingData_Filt <- t(usedTestMat_Filt)
### Sampsize
tmp <- as.vector(table(usedTrainGroup))
num_classes <- length(tmp)
min_size <- tmp[order(tmp,decreasing=FALSE)[1]]
sampsizes <- rep(min_size,num_classes)
###########################
## Explain the RF
# DataTrain <- cbind(PredictorData_Filt, usedTrainGroup)
# DataTrain <- as.data.frame(DataTrain)
# DataTrain$usedTrainGroup <- as.factor(DataTrain$usedTrainGroup)
# levels(DataTrain$usedTrainGroup) <- c("unComplicated", "Complicated")
#
# # MAke a violin plot
# library(tidyr)
#
# X <- pivot_longer(
#   DataTrain,
#   cols = 1:28,
#   names_to = "Gene",
#   names_repair = "check_unique",
#   values_to = "Expression",
# )
#
# png(filename = "./Figs/ComViolinPlot.png", width = 2000, height = 1200, res = 150)
# ggplot(X,
#        aes(x = usedTrainGroup,
#            y = Expression)) +
#   geom_violin(aes(fill = usedTrainGroup),
#               scale = "count")+
#   #geom_jitter(width = 0.1, size = 0.2)+
#   facet_wrap(~Gene)
# dev.off()
# set.seed(333)
# tuneRF(x = PredictorData_Filt, y = usedTrainGroup, mtryStart = 1, ntreeTry = 500, stepFactor = 1, improve = 0.01, trace = F, plot = F)
#
# set.seed(333)
# RF <- randomForest(usedTrainGroup~., data = DataTrain, mtry = 1, ntree = 500, trace = F, plot = F, doBest = T, sampsize = sampsizes, importance = T)
# RF
#
# explain_forest(RF, interactions = TRUE, data = DataTrain)
##################################
## Build the random forest model
set.seed(333)
load("./Objs/RF_Comp.rda")
################
# Predict in the training data
PredVotes_Train <- predict(RF_Comp, newdata = PredictorData_Filt, type = "vote")
PredResponse_Train <- predict(RF_Comp, PredictorData_Filt, type="response")
ROCTrain <- roc(usedTrainGroup, PredVotes_Train[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTrain
confusion_test <- confusionMatrix(PredResponse_Train, usedTrainGroup, positive = "Complicated")
confusion_test
# Calculate Matthews correlation coefficient
MCC_Train <- mcc(preds = PredResponse_Train, actuals = usedTrainGroup)
MCC_Train
#################
## Predict in the testing data
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(usedTestGroup, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
### Resubstitution peRF_Compormance in the Test set
ConfusionTest <- confusionMatrix(PredResponse_Test, usedTestGroup, positive = "Complicated", mode = "everything")
ConfusionTest
MCC_Test <- mltools::mcc(pred = PredResponse_Test, actuals = usedTestGroup)
MCC_Test
# For ROC and PRC curves
sscurves_Test_Comp <- evalmod(scores = PredVotes_Test[,2], labels = usedTestGroup)
sscurves_Test_Comp
ROC_Test_Comp <- autoplot(sscurves_Test_Comp, curvetype = c("ROC")) + labs(title = "ROC curve of the severe malaria signature") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.85"), size = 3)
PRC_Test_Comp <- autoplot(sscurves_Test_Comp, curvetype = c("PRC")) + labs(title = "PRC curve of the severe malaria signature") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.95"), size = 3)
save(ROC_Test_Comp, PRC_Test_Comp, file = "./Objs/SevereSigROC_PRC.rda")
rm(list = ls())
load("./Objs/MalariaDataGood_NCvsC.rda")
load("./Objs/PlacentalMalaria.rda")
#load("./Objs/CerebralExtraValidation2.rda")
# Quantile normalization
usedTrainMat <- normalizeBetweenArrays(mixTrainMat, method = "quantile")
usedTestMat <- normalizeBetweenArrays(mixTestMat, method = "quantile")
# Associated groups
usedTrainGroup <- mixTrainGroup
usedTestGroup <- mixTestGroup
# Transpose the matrix
PredictorData <- t(usedTrainMat)
# Bind expression with the groups
DataTrain <- cbind(PredictorData, usedTrainGroup)
DataTrain <- as.data.frame(DataTrain)
DataTrain$usedTrainGroup <- as.factor(DataTrain$usedTrainGroup)
levels(DataTrain[, "usedTrainGroup"]) <- c("nonCerebral", "cerebral")
names(DataTrain) <- make.names(names(DataTrain))
# Feature selection via RRF
lambda <- 0.8 # Both the number of features and the quality of the features are quite sensitive to lambda for RRF. A smaller lambda leads to fewer features.
# The function for bootstraping
# RF_Strap <- function(data, indices) {
#   d <- data[indices, ] # allows boot to select sample
#   rrf <- RRF(usedTrainGroup~., data = d, flagReg = 1, coefReg=lambda) # coefReg is a constant for all variables.   #either "X,as.factor(class)" or data frame like "Y~., data=data" is fine, but the later one is significantly slower.
#   TrainData <- d
#   TrainData$usedTrainGroup <- NULL
#   subsetRRF <- rrf$feaSet
#   SelFeats <- colnames(TrainData[, subsetRRF])
#   return(as.vector(SelFeats[1:30]))
# }
#
# set.seed(333)
# bootobject_Cerebral <- boot(data = DataTrain, statistic = RF_Strap, R = 100, parallel = "multicore", ncpus = 15)
#
# save(bootobject_Cerebral, file = "./Objs/bootobject_Cerebral.rda")
load("./Objs/bootobject_Cerebral.rda")
OutFeat <- bootobject_Cerebral$t
u_genes <- na.omit(unique(as.vector(as.matrix(OutFeat))))
find_gen_rep <- function(dat, gene){
# NAs create problems in the function so we substitute that with "unknown"
dat[is.na(dat)] <- "unknown"
rep_rows <- sum(apply(dat, 1,  function(x) any(x == gene)))
names(rep_rows) <- gene
as.data.frame(rep_rows)
}
list_results <- lapply(u_genes, find_gen_rep, dat = OutFeat)
sum_result <- do.call(rbind, list_results)
sum_result$Gene <- rownames(sum_result)
sum_result <- sum_result[sum_result$rep_rows >= 5, ]
Sel <- sum_result$Gene
Sel
####################################
# Frequency plot
sum_result <- sum_result[order(sum_result$rep_rows, decreasing = T), ]
usedTrainMat_Filt <- usedTrainMat[Sel, ]
usedTestMat_Filt <- usedTestMat[Sel, ]
# Transpose the matrices
PredictorData_Filt <- t(usedTrainMat_Filt)
TestingData_Filt <- t(usedTestMat_Filt)
### Sampsize
tmp <- as.vector(table(usedTrainGroup))
num_classes <- length(tmp)
min_size <- tmp[order(tmp,decreasing=FALSE)[1]]
sampsizes <- rep(min_size,num_classes)
###########################
## Explain the RF
# DataTrain <- cbind(PredictorData_Filt, usedTrainGroup)
# DataTrain <- as.data.frame(DataTrain)
# DataTrain$usedTrainGroup <- as.factor(DataTrain$usedTrainGroup)
# levels(DataTrain$usedTrainGroup) <- c("nonCerebral", "cerebral")
#
# # MAke a violin plot
# library(tidyr)
#
# X <- pivot_longer(
#   DataTrain,
#   cols = 1:28,
#   names_to = "Gene",
#   names_repair = "check_unique",
#   values_to = "Expression",
# )
#
# png(filename = "./Figs/CerebralViolinPlot.png", width = 2000, height = 1200, res = 150)
# ggplot(X,
#        aes(x = usedTrainGroup,
#            y = Expression)) +
#   geom_violin(aes(fill = usedTrainGroup),
#               scale = "count")+
#   #geom_jitter(width = 0.1, size = 0.2)+
#   facet_wrap(~Gene)
# dev.off()
#
# set.seed(333)
# tuneRF(x = PredictorData_Filt, y = usedTrainGroup, mtryStart = 1, ntreeTry = 500, stepFactor = 1, improve = 0.01, trace = F, plot = F)
#
# set.seed(333)
# RF <- randomForest(usedTrainGroup~., data = DataTrain, mtry = 1, ntree = 500, trace = F, plot = F, doBest = T, sampsize = sampsizes, importance = T)
# RF
#
# explain_forest(RF, interactions = TRUE, data = DataTrain)
################
## Build the random forest model
set.seed(333)
load("./Objs/RF_Cerebral.rda")
PredVotes_Train <- predict(RF_Cerebral, newdata = PredictorData_Filt, type = "vote")
PredResponse_Train <- predict(RF_Cerebral, PredictorData_Filt, type="response")
ROCTrain <- roc(usedTrainGroup, PredVotes_Train[,2], plot = F, print.auc = TRUE, levels = c("nonCerebral", "cerebral"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTrain
confusion_test <- confusionMatrix(PredResponse_Train, usedTrainGroup, positive = "cerebral")
confusion_test
# Calculate Matthews correlation coefficient
MCC_Train <- mcc(preds = PredResponse_Train, actuals = usedTrainGroup)
MCC_Train
#################
## Predict in the testing data
PredVotes_Test <- predict(RF_Cerebral, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Cerebral, TestingData_Filt, type="response")
ROCTest <- roc(usedTestGroup, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("nonCerebral", "cerebral"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
### Resubstitution performance in the Test set
ConfusionTest <- confusionMatrix(PredResponse_Test, usedTestGroup, positive = "cerebral", mode = "everything")
ConfusionTest
MCC_Test <- mltools::mcc(pred = PredResponse_Test, actuals = usedTestGroup)
MCC_Test
# For ROC and PRC curves
sscurves_Test_Cerebral <- evalmod(scores = PredVotes_Test[,2], labels = usedTestGroup)
sscurves_Test_Cerebral
ROC_Test_Cerebral <- autoplot(sscurves_Test_Cerebral, curvetype = c("ROC")) + labs(title = "ROC curve of the cerebral malaria signature") + annotate("text", x = .65, y = .25, label = paste("AUC = 0.98"), size = 3)
PRC_Test_Cerebral <- autoplot(sscurves_Test_Cerebral, curvetype = c("PRC")) + labs(title = "PRC curve of the cerebral malaria signature") + annotate("text", x = .65, y = .25, label = paste("AUPRC = 0.98"), size = 3)
########################################################################
##############################################
## Make a combined figure for the paper
load("./Objs/SevereSigROC_PRC.rda")
ROC_Test_Comp$theme$plot.title$size <- 8
PRC_Test_Comp$theme$plot.title$size <- 8
ROC_Test_Cerebral$theme$plot.title$size <- 8
PRC_Test_Cerebral$theme$plot.title$size <- 8
tiff(filename = "./Figs/TwoSignaturesPerformance.tiff", width = 2500, height = 2000, res = 350)
((ROC_Test_Comp / PRC_Test_Comp + plot_layout(tag_level = "new") & theme(plot.tag = element_text(size = 12))) |
(ROC_Test_Cerebral / PRC_Test_Cerebral + plot_layout(tag_level = "new") & theme(plot.tag = element_text(size = 12)))
) +
#plot_layout(widths = c(0.4, 1)) +
plot_annotation(
title = 'The performance of the two malaria signatures in the testing data',
tag_levels = c('A', '1'),
theme = theme(plot.title = element_text(size = 12, face = "bold"))
)
dev.off()
