Pheno_Test <- pData(Dataset)
FeatData_Test <- fData(Dataset)
## Expr_Cerebral
head(rownames(Expr_Test))
library(pd.hta.2.0)
BiocManager::install("pd.hta.2.0")
install.packages("/Users/mohamedomar/Downloads/pd.hta.2.0_3.12.2.tar.gz", repos = NULL, type = "source")
library(pd.hta.2.0)
Dataset <- annotateEset(Dataset, pd.hta.2.0)
library(pd.hta.2.0)
Dataset <- annotateEset(Dataset, pd.hta.2.0)
BiocManager::install("affycoretools")
library(affycoretools)
install.packages("dplyr")
rm(list = ls())
library(GEOquery)
library(pd.hta.2.0)
library(affycoretools)
Dataset <- getGEO("GSE144826", GSEMatrix = T, AnnotGPL = T)
Dataset <- Dataset$GSE144826_series_matrix.txt.gz
Dataset <- getGEO("GSE144826", GSEMatrix = T, AnnotGPL = T)
Dataset <- Dataset$GSE144826_series_matrix.txt.gz
Expr_Test <- exprs(Dataset)
Pheno_Test <- pData(Dataset)
Dataset <- annotateEset(Dataset, pd.hta.2.0)
View(Dataset)
Dataset@featureData@data
BiocManager::install("pd.hugene.2.1.st")
library(pd.hugene.2.1.st)
Dataset <- annotateEset(Dataset, pd.hugene.2.1.st)
rm(list = ls())
Dataset <- getGEO("GSE144826", GSEMatrix = T, AnnotGPL = T)
Dataset <- Dataset$GSE144826_series_matrix.txt.gz
Dataset <- Dataset$GSE144826_series_matrix.txt.gz
Dataset <- getGEO("GSE144826", GSEMatrix = T, AnnotGPL = T)
Dataset <- Dataset$GSE144826_series_matrix.txt.gz
Expr_Test <- exprs(Dataset)
Pheno_Test <- pData(Dataset)
Dataset <- annotateEset(Dataset, pd.hugene.2.1.st)
?annotateEset
View(Expr_Test)
FeatData_Test <- fData(Dataset)
rownames(Expr_Test) <- FeatData_Test$SYMBOL
summary(is.na(rownames(Expr_Test3)))
summary(is.na(rownames(Expr_Test)))
#rownames(Expr_Cerebral) <- gsub("-","", rownames(Expr_Cerebral))
#rownames(Expr_Cerebral) <- gsub("_","",rownames(Expr_Cerebral))
sel <- which(apply(Expr_Test, 1, function(x) all(is.finite(x)) ))
Expr_Test <- Expr_Test[sel, ]
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
Expr_Test <- log2(Expr_Test)
Expr_Test <- exprs(Dataset)
head(rownames(Expr_Test))
rownames(Expr_Test) <- FeatData_Test$SYMBOL
summary(is.na(rownames(Expr_Test)))
#rownames(Expr_Cerebral) <- gsub("-","", rownames(Expr_Cerebral))
#rownames(Expr_Cerebral) <- gsub("_","",rownames(Expr_Cerebral))
sel <- which(apply(Expr_Test, 1, function(x) all(is.finite(x)) ))
Expr_Test <- Expr_Test[sel, ]
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
Expr_Test <- t(scale(t(Expr_Test), center = TRUE, scale = TRUE))
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`protection:ch1`)
levels(Pheno_Test$DiseaseStatus)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
table(Pheno_Test$DiseaseStatus)
ClassProtectedVsUnProtected <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
usedTestMat_Filt <- Expr_Test[Sel, ]
Sel <- intersect(Sel, rownames(Expr_Test))
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
RF_Comp$importance <- RF_Comp$importance[Sel, ]
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
library(RRF)
require(limma)
library(randomForest)
library(boot)
library(precrec)
library(pheatmap)
library(randomForestExplainer)
library(inTrees)
library(pROC)
library(caret)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(usedTestGroup, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest <- roc(ClassProtectedVsUnProtected, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
View(Pheno_Test)
View(Pheno_Test)
Pheno_Test <- Pheno_Test[!(Pheno_Test$`vaccine:ch1` == "Control"), ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`protection:ch1`)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
ClassProtectedVsUnProtected <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassProtectedVsUnProtected, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassProtectedVsUnProtected, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
table(Pheno_Test$`vaccine:ch1`)
Pheno_Test <- Pheno_Test[Pheno_Test$`vaccine:ch1` == "CPS", ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`protection:ch1`)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
ClassProtectedVsUnProtected <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassProtectedVsUnProtected, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
rm(list = ls())
Dataset <- getGEO("GSE35859", GSEMatrix = T, AnnotGPL = T)
Dataset <- Dataset$GSE35859_series_matrix.txt.gz
Expr_Test <- exprs(Dataset)
Pheno_Test <- pData(Dataset)
FeatData_Test <- fData(Dataset)
## Expr_Cerebral
head(rownames(Expr_Test))
View(FeatData_Test)
rownames(Expr_Test) <- FeatData_Test$`Composite Element Database Entry[Gene Symbol]`
summary(is.na(rownames(Expr_Test)))
#rownames(Expr_Cerebral) <- gsub("-","", rownames(Expr_Cerebral))
#rownames(Expr_Cerebral) <- gsub("_","",rownames(Expr_Cerebral))
sel <- which(apply(Expr_Test, 1, function(x) all(is.finite(x)) ))
Expr_Test <- Expr_Test[sel, ]
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
View(Pheno_Test)
Pheno_Test <- Pheno_Test[!(Pheno_Test$`disease state:ch2` == "Healthy"), ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`disease state:ch2`)
levels(Pheno_Test$DiseaseStatus)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
table(Pheno_Test$DiseaseStatus)
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
ClassComplicatedVsUnComplicated <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
rm(list = ls())
ExternalDataset <- getGEO("GSE35859", GSEMatrix = T, AnnotGPL = T)
ExternalDataset <- ExternalDataset$GSE35859_series_matrix.txt.gz
Expr_Test <- exprs(ExternalDataset)
Pheno_Test <- pData(ExternalDataset)
FeatData_Test <- fData(ExternalDataset)
## Expr_Cerebral
head(rownames(Expr_Test))
rownames(Expr_Test) <- FeatData_Test$`Composite Element Database Entry[Gene Symbol]`
summary(is.na(rownames(Expr_Test)))
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
Pheno_Test <- Pheno_Test[!(Pheno_Test$`disease state:ch2` == "Healthy"), ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`disease state:ch2`)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
ClassComplicatedVsUnComplicated <- Pheno_Test$DiseaseStatus
range(Expr_Test)
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
View(usedTestMat_Filt)
X <- apply(usedTestMat_Filt, 1, function(x){
is.na(x) == 0
})
View(X)
X <- apply(usedTestMat_Filt, 1, function(x){
x[is.na(x)] == 0
})
X <- apply(usedTestMat_Filt, 1, function(x){
x[is.na(x), ] == 0
})
View(X)
X <- tapply(usedTestMat_Filt, 1, function(x){
x[is.na(x)] == 0
})
summary(is.na(usedTestMat_Filt))
is.na(usedTestMat_Filt)
x[which(is.na(x))] == 0
X <- apply(usedTestMat_Filt, 1, function(x){
x[which(is.na(x))] == 0
})
which(is.na(usedTestMat_Filt))
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[i,] == 0
})
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[i] == 0
})
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[i] == 0
})
View(X)
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[i,] == 0
})
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[,i] == 0
})
sel <- which(apply(usedTestMat_Filt, 1, function(x) all(is.na(x)) ))
sel <- which(apply(usedTestMat_Filt, 1, function(x) is.na(x) ))
usedTestMat_Filt[sel, ] == 0
sel
sel <- which(apply(usedTestMat_Filt, 1, function(x) any(is.na(x)) ))
usedTestMat_Filt[sel, ] == 0
View(usedTestMat_Filt)
X <- usedTestMat_Filt[sel, ] == 0
View(X)
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x <- x[i] == 0
})
View(X)
x[x[i, ]] == 0
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[x[i, ]] == 0
})
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[i, ] <- 0
})
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[i] <- 0
})
X <- apply(usedTestMat_Filt, 1, function(x){
i <- which(is.na(x))
x[,i] <- 0
})
X <- apply(usedTestMat_Filt, 2, function(x){
i <- which(is.na(x))
x[i] <- 0
})
X <- apply(usedTestMat_Filt, 2, function(x){
i <- which(is.na(x))
x[,i] <- 0
})
X <- apply(usedTestMat_Filt, 2, function(x){
i <- which(is.na(x))
x[i,] <- 0
})
View(TestingData_Filt)
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
usedTestMat_Filt[is.na(usedTestMat_Filt)] <- 0
View(usedTestMat_Filt)
usedTestMat_Filt <- Expr_Test[Sel, ]
usedTestMat_Filt[is.na(usedTestMat_Filt)] <- 0
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
save(ExternalDataset, file = "./Objs/ExternalDataset.rda")
load("./Objs/ExternalDataset.rda")
Expr_Test <- exprs(ExternalDataset)
Pheno_Test <- pData(ExternalDataset)
FeatData_Test <- fData(ExternalDataset)
head(rownames(Expr_Test))
rownames(Expr_Test) <- FeatData_Test$`Composite Element Database Entry[Gene Symbol]`
summary(is.na(rownames(Expr_Test)))
#rownames(Expr_Cerebral) <- gsub("-","", rownames(Expr_Cerebral))
#rownames(Expr_Cerebral) <- gsub("_","",rownames(Expr_Cerebral))
sel <- which(apply(Expr_Test, 1, function(x) all(is.finite(x)) ))
Expr_Test <- Expr_Test[sel, ]
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
Pheno_Test <- Pheno_Test[!(Pheno_Test$`disease state:ch2` == "Healthy"), ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`disease state:ch2`)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
ClassComplicatedVsUnComplicated <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
rm(list = ls())
load("./Objs/ExternalDataset.rda")
Expr_Test <- exprs(ExternalDataset)
Pheno_Test <- pData(ExternalDataset)
FeatData_Test <- fData(ExternalDataset)
## Expr_Cerebral
head(rownames(Expr_Test))
rownames(Expr_Test) <- FeatData_Test$`Composite Element Database Entry[Gene Symbol]`
summary(is.na(rownames(Expr_Test)))
#rownames(Expr_Cerebral) <- gsub("-","", rownames(Expr_Cerebral))
#rownames(Expr_Cerebral) <- gsub("_","",rownames(Expr_Cerebral))
sel <- which(apply(Expr_Test, 1, function(x) all(is.finite(x)) ))
Expr_Test <- Expr_Test[sel, ]
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
Pheno_Test <- Pheno_Test[!(Pheno_Test$`disease state:ch2` == "Healthy"), ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`disease state:ch2`)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
ClassComplicatedVsUnComplicated <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
rm(list = ls())
library(GEOquery)
library(pd.hugene.2.1.st)
library(affycoretools)
library(pROC)
library(caret)
ExternalDataset <- getGEO("GSE35859", GSEMatrix = T, AnnotGPL = T)
ExternalDataset <- ExternalDataset$GSE35859_series_matrix.txt.gz
save(ExternalDataset, file = "./Objs/ExternalDataset.rda")
Expr_Test <- exprs(ExternalDataset)
Pheno_Test <- pData(ExternalDataset)
FeatData_Test <- fData(ExternalDataset)
head(rownames(Expr_Test))
rownames(Expr_Test) <- FeatData_Test$`Composite Element Database Entry[Gene Symbol]`
summary(is.na(rownames(Expr_Test)))
#rownames(Expr_Cerebral) <- gsub("-","", rownames(Expr_Cerebral))
#rownames(Expr_Cerebral) <- gsub("_","",rownames(Expr_Cerebral))
sel <- which(apply(Expr_Test, 1, function(x) all(is.finite(x)) ))
Expr_Test <- Expr_Test[sel, ]
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
#Expr_Test <- t(scale(t(Expr_Test), center = TRUE, scale = TRUE))
Pheno_Test <- Pheno_Test[!(Pheno_Test$`disease state:ch2` == "Healthy"), ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`disease state:ch2`)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
ClassComplicatedVsUnComplicated <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
#######################
set.seed(333)
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
#######################
set.seed(111)
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
### Resubstitution peRF_Compormance in the Test set
ConfusionTest <- confusionMatrix(PredResponse_Test, ClassComplicatedVsUnComplicated, positive = "Complicated", mode = "everything")
ConfusionTest
MCC_Test <- mltools::mcc(pred = PredResponse_Test, actuals = ClassComplicatedVsUnComplicated)
MCC_Test
# For ROC and PRC curves
sscurves_Test_Comp <- evalmod(scores = PredVotes_Test[,2], labels = ClassComplicatedVsUnComplicated)
sscurves_Test_Comp
rm(list = ls())
library(GEOquery)
library(pd.hugene.2.1.st)
library(affycoretools)
library(pROC)
library(caret)
ExternalDataset <- getGEO("GSE35859", GSEMatrix = T, AnnotGPL = T)
ExternalDataset <- ExternalDataset$GSE35859_series_matrix.txt.gz
save(ExternalDataset, file = "./Objs/ExternalDataset.rda")
Expr_Test <- exprs(ExternalDataset)
Pheno_Test <- pData(ExternalDataset)
FeatData_Test <- fData(ExternalDataset)
head(rownames(Expr_Test))
rownames(Expr_Test) <- FeatData_Test$`Composite Element Database Entry[Gene Symbol]`
summary(is.na(rownames(Expr_Test)))
#rownames(Expr_Cerebral) <- gsub("-","", rownames(Expr_Cerebral))
#rownames(Expr_Cerebral) <- gsub("_","",rownames(Expr_Cerebral))
sel <- which(apply(Expr_Test, 1, function(x) all(is.finite(x)) ))
Expr_Test <- Expr_Test[sel, ]
Expr_Test <- Expr_Test[!is.na(rownames(Expr_Test)),]
dim(Expr_Test)
range(Expr_Test)
Pheno_Test <- Pheno_Test[!(Pheno_Test$`disease state:ch2` == "Healthy"), ]
Pheno_Test$DiseaseStatus <- as.factor(Pheno_Test$`disease state:ch2`)
levels(Pheno_Test$DiseaseStatus) <- c("Complicated", "unComplicated")
table(Pheno_Test$DiseaseStatus)
Pheno_Test$DiseaseStatus <- factor(Pheno_Test$DiseaseStatus, levels = c("unComplicated", "Complicated"))
Expr_Test <- Expr_Test[, colnames(Expr_Test) %in% rownames(Pheno_Test)]
all(rownames(Pheno_Test) == colnames(Expr_Test))
ClassComplicatedVsUnComplicated <- Pheno_Test$DiseaseStatus
load("./Objs/RF_Comp.rda")
####
Sel <- rownames(RF_Comp$importance)
Sel <- intersect(Sel, rownames(Expr_Test))
RF_Comp$importance <- RF_Comp$importance[Sel, ]
usedTestMat_Filt <- Expr_Test[Sel, ]
TestingData_Filt <- t(usedTestMat_Filt)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
library(randomForest)
#######################
PredVotes_Test <- predict(RF_Comp, newdata = TestingData_Filt, type = "vote")
PredResponse_Test <- predict(RF_Comp, TestingData_Filt, type="response")
ROCTest <- roc(ClassComplicatedVsUnComplicated, PredVotes_Test[,2], plot = F, print.auc = TRUE, levels = c("unComplicated", "Complicated"), direction = "<", col = "blue", lwd = 2, grid = TRUE, auc = TRUE, ci = TRUE)
ROCTest
View(PredVotes_Test)
### Resubstitution peRF_Compormance in the Test set
ConfusionTest <- confusionMatrix(PredResponse_Test, ClassComplicatedVsUnComplicated, positive = "Complicated", mode = "everything")
ConfusionTest
MCC_Test <- mltools::mcc(pred = PredResponse_Test, actuals = ClassComplicatedVsUnComplicated)
MCC_Test
View(Pheno_Test)
